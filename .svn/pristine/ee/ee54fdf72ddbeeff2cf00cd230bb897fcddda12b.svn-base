<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_torso</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>obj_game_object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add GUI and inventory objects
// © 2017 - Jon Harvey

instance_create(0,0,obj_controller_gui);
instance_create(0,0,obj_controller_inventory);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gun variables
// © 2017 - Jon Harvey

Rate = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player variables
// © 2017 - Jon Harvey

Health = 10;

GunDirection = 90;
WalkDirection = 90;

TurnSpeed = 0;
WalkSpeedX = 0;
WalkSpeedY = 0;
WalkFrame = 0;
Radius = 16;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gun controller
// © 2017 - Jon Harvey

//Temporary speed variables for recoil.
var SpeedX,SpeedY;
SpeedX = 0;
SpeedY = 0;

//Reduce swap and kick animations to 0.
Gkick *= S90;
Gswap *= S90;

//Fire or swap guns when not swapping.
if abs(Gswap)&lt;0.1 {
        
    //Add to gun timelines.
    Rate += DELTA;
    Reload[Gcurrent] += DELTA;
    
    //Control gun swap.
    Gswap = mouse_wheel_down()-mouse_wheel_up();
    if Gswap != 0{
        
        Gcurrent = ((Gcurrent-Gswap+Gcount) mod Gcount);
        Rate = 0;
    }

    //Shoot fully-automatic or semi-automatic with left click.
    if mouse_check_button(mb_left)*Gauto[G[Gcurrent]] || mouse_check_button_pressed(mb_left)*!Gauto[G[Gcurrent]]{
        
        //Check gun timelines.
        if (Rate&gt;1/Grate[G[Gcurrent]] &amp;&amp; Reload[Gcurrent]&gt;Greload[G[Gcurrent]] &amp;&amp; Clips[Gcurrent]&gt;=0){
            
            audio_play_sound(snd_gun,0,0);
            Rate = 0;
            
            //Shoot all bullets.
            for(var S = 0;S&lt;Gbullets[G[Gcurrent]];S++){
                
                var Bullet = instance_create(x+16*dcos(GunDirection),y-16*dsin(GunDirection),Gtype[G[Gcurrent]]);
                var Direction = GunDirection+sqr(random(1))*choose(1,-1)*Garc[G[Gcurrent]];
                Bullet.direction = Direction;
                Bullet.image_angle = Direction;
            }
            
            //Update or reload clip.
            if (--Clip[Gcurrent]==0 &amp;&amp; --Clips[Gcurrent]&gt;=0){
            
                audio_play_sound(snd_empty,0,0);
                Clip[Gcurrent] = Gclip[G[Gcurrent]];
                Reload[Gcurrent] = 0;
            }
            
            //Add gun recoil to player speed and kick.
            Gkick = Grecoil[G[Gcurrent]];
            SpeedX = -Grecoil[G[Gcurrent]]*dcos(GunDirection)/FRAME_DELTA;
            SpeedY = -Grecoil[G[Gcurrent]]*dsin(GunDirection)/FRAME_DELTA;
        }
    }
    
    //Reload with the reload key.
    if Kreload &amp;&amp; (Clip[Gcurrent]&lt;Gclip[G[Gcurrent]] &amp;&amp; --Clips[Gcurrent]&gt;=0){
    
        Clips[Gcurrent] = max(Clips[Gcurrent],-1);
        Clip[Gcurrent] = Gclip[G[Gcurrent]];
        Reload[Gcurrent] = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player movement
// © 2017 - Jon Harvey

//Set controls for movement.
var Turn,Vert,Hor;
Turn = Kturnleft-Kturnright;
Vert = Kup-Kdown;
Hor = Kleft-Kright;

//Smooth turn speed for turning motion.
TurnSpeed = TurnSpeed*S90+(1-S90)*Turn;

//Handle player turning gun and player direction.
WalkDirection += 2*TurnSpeed*FRAME_DELTA;
Turn = angle_difference(point_direction(x,y,mouse_x,mouse_y),GunDirection);
GunDirection += 0.3*Turn*FRAME_DELTA;

//Smooth walk using controls defined above.
var Speed;
Speed = max(sqrt(sqr(Hor)+sqr(Vert)),1)/Gweight[G[Gcurrent]];
SpeedX += 4*(Vert*dsin(view_angle[0])-Hor*dcos(-view_angle[0]))/Speed;
SpeedY += 4*(Vert*dcos(view_angle[0])-Hor*dsin(-view_angle[0]))/Speed;

WalkSpeedX = WalkSpeedX*S90+(1-S90)*(SpeedX*(dcos(GunDirection)*sign(SpeedX)*0.3+0.7));
WalkSpeedY = WalkSpeedY*S90-(1-S90)*(SpeedY*(dsin(GunDirection)*sign(SpeedY)*0.3+0.7));
x += FRAME_DELTA*WalkSpeedX;
y += FRAME_DELTA*WalkSpeedY;

//Update walk frame
var Speed = sqrt(sqr(WalkSpeedX)+sqr(WalkSpeedY));
WalkFrame = (WalkFrame+0.05*FRAME_DELTA*Speed)*(Speed&gt;5*DELTA);

//© 2017 - Reece Warren
//Collision code:

//Horizontal Collision:
if (WalkSpeedX != 0){
    if (!place_free(x + WalkSpeedX, y)){
    
        if (WalkSpeedX &gt; 0){
            move_contact_solid(0,WalkSpeedX);
        }
        else if (WalkSpeedX &lt; 0){
            move_contact_solid(180,-WalkSpeedX);
        }
        
        WalkSpeedX = 0;
    }
}

//Vertical Collision:
if (WalkSpeedY != 0){
    if (!place_free(x, y + WalkSpeedY)){
    
        if (WalkSpeedY &gt; 0){
            move_contact_solid(270,WalkSpeedX);
        }
        else if (WalkSpeedY &lt; 0){
            move_contact_solid(90,-WalkSpeedX);
        }
        
        WalkSpeedY = 0;
    }
}        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake Screen
Shake = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player
// © 2017 - Jon Harvey

var Turn = angle_difference(point_direction(x,y,mouse_x,mouse_y),GunDirection);
var Direction = darctan2(-WalkSpeedY,WalkSpeedX);

draw_sprite_ext(spr_player_legs,WalkFrame,x,y,1,1,Direction,$FFFFFF,1);
draw_sprite_ext(spr_player_torso,1+sign(Turn)*(abs(Turn)&gt;15),x-dcos(GunDirection)*min(Gkick,5),y+dsin(GunDirection)*min(Gkick,5),1,1,GunDirection,$FFFFFF,1);
draw_sprite_ext(spr_player_head,0,x,y,1,1,GunDirection+0.6*Turn,$FFFFFF,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
