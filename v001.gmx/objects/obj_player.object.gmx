<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_torso</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gun inventory variables
// © 2017 - Jon Harvey

Gcount = 7;
Gcurrent = 0;
Gswap = 0;

//Guns (ids) in inventory.
G[0] = 0;
G[1] = 1;
G[2] = 2;
G[3] = 3;
G[4] = 4;
G[5] = 5;
G[6] = 6;

//Gun shooting timeline.
Rate[0] = Grate[G[0]];
Rate[1] = Grate[G[1]];
Rate[2] = Grate[G[2]];
Rate[3] = Grate[G[3]];
Rate[4] = Grate[G[4]];
Rate[5] = Grate[G[5]];
Rate[6] = Grate[G[6]];

//Gun reloading timeline.
Reload[0] = Greload[G[0]];
Reload[1] = Greload[G[1]];
Reload[2] = Greload[G[2]];
Reload[3] = Greload[G[3]];
Reload[4] = Greload[G[4]];
Reload[5] = Greload[G[5]];
Reload[6] = Greload[G[6]];

//Gun clip ammo.
Clip[0] = Gclip[G[0]];
Clip[1] = Gclip[G[1]];
Clip[2] = Gclip[G[2]];
Clip[3] = Gclip[G[3]];
Clip[4] = Gclip[G[4]];
Clip[5] = Gclip[G[5]];
Clip[6] = Gclip[G[6]];
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player variables
// © 2017 - Jon Harvey

GunDirection = 90;
WalkDirection = 90;

TurnSpeed = 0;
WalkSpeedX = 0;
WalkSpeedY = 0;
WalkFrame = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screenshake variables
// © 2017 - Jon Harvey

globalvar Shake;
Shake = 0;
ShakeX = 0;
ShakeY = 0;
ShakeAngle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gun controller
// © 2017 - Jon Harvey

//Temporary speed variables for recoil.
var SpeedX,SpeedY;
SpeedX = 0;
SpeedY = 0;

//Reduce swap animation to 0.
Gswap *= S90;

//Fire or swap guns when not swapping.
if abs(Gswap)&lt;0.1 {
    
    //Control gun swap.
    Gswap = mouse_wheel_down()-mouse_wheel_up();
    if Gswap != 0{
        
        Gcurrent = ((Gcurrent-Gswap+Gcount) mod Gcount);
    }
    
    //Add to gun timelines.
    Rate[Gcurrent] += DELTA;
    Reload[Gcurrent] += DELTA;
    
    //Shoot fully-automatic or semi-automatic with left click.
    if mouse_check_button(mb_left)*Gauto[G[Gcurrent]] || mouse_check_button_pressed(mb_left)*!Gauto[G[Gcurrent]]{
        
        //Check gun timelines.
        if (Rate[Gcurrent]&gt;1/Grate[G[Gcurrent]] &amp;&amp; Reload[Gcurrent]&gt;Greload[G[Gcurrent]]){
        
            audio_play_sound(snd_gun,0,0);
            Rate[Gcurrent] = 0;
            
            //Shoot all bullets.
            for(var S = 0;S&lt;Gbullets[G[Gcurrent]];S++){
                
                var Bullet = instance_create(x+12*dcos(GunDirection),y-12*dsin(GunDirection),Gtype[G[Gcurrent]]);
                var Direction = GunDirection+sqr(random(1))*choose(1,-1)*Garc[G[Gcurrent]];
                Bullet.direction = Direction;
                Bullet.image_angle = Direction;
            }
            
            //Update or reload clip.
            Clip[Gcurrent]--;
            if (Clip[Gcurrent]&lt;=0){
            
                audio_play_sound(snd_empty,0,0);
                Clip[Gcurrent] = Gclip[G[Gcurrent]];
                Reload[Gcurrent] = 0;
            }
            
            //Add gun recoil or kick to player speed.
            SpeedX = -Grecoil[G[Gcurrent]]*dcos(GunDirection)/FRAME_DELTA;
            SpeedY = -Grecoil[G[Gcurrent]]*dsin(GunDirection)/FRAME_DELTA;
        }
    }
    if Kreload &amp;&amp; (Clip[Gcurrent]&lt;Gclip[G[Gcurrent]]){
    
        Clip[Gcurrent] = Gclip[G[Gcurrent]];
        Reload[Gcurrent] = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player movement
// © 2017 - Jon Harvey

//Set controls for movement.
var Turn,Vert,Hor;
Turn = Kturnleft-Kturnright;
Vert = Kup-Kdown;
Hor = Kleft-Kright;

//Smooth turn speed for turning motion.
TurnSpeed = TurnSpeed*S90+(1-S90)*Turn;

//Handle player turning gun and player direction.
WalkDirection += 2*TurnSpeed*FRAME_DELTA;
Turn = angle_difference(point_direction(x,y,mouse_x,mouse_y),GunDirection);
GunDirection += 0.3*Turn*FRAME_DELTA;

//Smooth walk using controls defined above.
var Speed;
Speed = max(sqrt(sqr(Hor)+sqr(Vert)),1)/Gweight[G[Gcurrent]];
SpeedX += 4*(Vert*dsin(view_angle[0])-Hor*dcos(-view_angle[0]))/Speed;
SpeedY += 4*(Vert*dcos(view_angle[0])-Hor*dsin(-view_angle[0]))/Speed;

WalkSpeedX = WalkSpeedX*S90+(1-S90)*(SpeedX*(dcos(GunDirection)*sign(SpeedX)*0.3+0.7));
WalkSpeedY = WalkSpeedY*S90-(1-S90)*(SpeedY*(dsin(GunDirection)*sign(SpeedY)*0.3+0.7));
x += FRAME_DELTA*WalkSpeedX;
y += FRAME_DELTA*WalkSpeedY;

//Update walk frame
var Speed = sqrt(sqr(WalkSpeedX)+sqr(WalkSpeedY));
WalkFrame = (WalkFrame+0.05*FRAME_DELTA*Speed)*(Speed&gt;5*DELTA);

//© 2017 - Reece Warren
//Collision code:

//Horizontal Collision:
if (WalkSpeedX != 0){
    if (!place_free(x + WalkSpeedX, y)){
    
        if (WalkSpeedX &gt; 0){
            move_contact_solid(0,WalkSpeedX);
        }
        else if (WalkSpeedX &lt; 0){
            move_contact_solid(180,-WalkSpeedX);
        }
        
        WalkSpeedX = 0;
    }
}

//Vertical Collision:
if (WalkSpeedY != 0){
    if (!place_free(x, y + WalkSpeedY)){
    
        if (WalkSpeedY &gt; 0){
            move_contact_solid(270,WalkSpeedX);
        }
        else if (WalkSpeedY &lt; 0){
            move_contact_solid(90,-WalkSpeedX);
        }
        
        WalkSpeedY = 0;
    }
}        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///View and screenshake controller
// © 2017 - Jon Harvey

Shake = Shake*S90;
ShakeX = ShakeX*(1-S90)+S90*50*Shake*(random(2)-1);
ShakeY = ShakeY*(1-S90)+S90*50*Shake*(random(2)-1);
ShakeAngle = ShakeAngle*(1-S90)+S90*20*Shake*(random(2)-1);

//Smoothly translate and rotate view with player.
view_xview[0] = view_xview[0]*S90+(1-S90)*(x-view_wview[0]/2+ShakeX);
view_yview[0] = view_yview[0]*S90+(1-S90)*(y-view_hview[0]/2+ShakeY);
view_angle[0] = view_angle[0]*S98+(1-S98)*(90-WalkDirection+ShakeAngle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake Screen
Shake = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw gun info
// © 2017 - Jon Harvey

// Only draw if the debugger is not visible - Reece:
//if (DEBUG_VISIBLE == false){

    draw_set_alpha(0.2);
    draw_circle_colour(0,540,60,$AAAAAA,$FFFFFF,0);
    draw_set_alpha(1);
    
    draw_primitive_begin(pr_trianglestrip);
    for(var i = 0;i&lt;=45;i++){
        
        var Angle = i*2*min(Reload[Gcurrent]/Greload[G[Gcurrent]],1);
        draw_vertex_colour(dcos(Angle)*150,540-dsin(Angle)*150,$444499,0.6);
        draw_vertex_colour(dcos(Angle)*60,540-dsin(Angle)*60,$333333,0.6);
    }
    draw_primitive_end();
    
    var Angle;
    Angle = 30*Gswap-45;
    draw_sprite_ext(spr_gun,G[Gcurrent],dcos(Angle)*140,540+dsin(Angle)*140,1,1,-Angle,-1,1);
    draw_sprite_ext(spr_gun,G[(Gcurrent+1)%Gcount],dcos(Angle-30)*140,540+dsin(Angle-30)*140,1,1,30-Angle,-1,0.5+Gswap);
    draw_sprite_ext(spr_gun,G[(Gcurrent+Gcount-1)%Gcount],dcos(Angle+30)*140,540+dsin(Angle+30)*140,1,1,-30-Angle,-1,0.5-Gswap);
    
    draw_text(4,516,string(Clip[Gcurrent])+"/"+string(Gclip[G[Gcurrent]]));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player
// © 2017 - Jon Harvey

var Turn = angle_difference(point_direction(x,y,mouse_x,mouse_y),GunDirection);
var Direction = darctan2(-WalkSpeedY,WalkSpeedX);

draw_sprite_ext(spr_player_legs,WalkFrame,x,y,1,1,Direction,$FFFFFF,1);
draw_sprite_ext(spr_player_torso,1+sign(Turn)*(abs(Turn)&gt;15),x,y,1,1,GunDirection,$FFFFFF,1);
draw_sprite_ext(spr_player_head,0,x,y,1,1,GunDirection+0.6*Turn,$FFFFFF,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
