<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_torso</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gun variables
// © 2017 - Jon Harvey

Gun = 0;//Gun selection
GunCount = 3;

GunAuto[0] = 1;//0 = semi-automatic, 1 = fully-automatic
GunAuto[1] = 0;
GunAuto[2] = 1;

GunRate[0] = 10;//Rounds per second.
GunRate[1] = 4;
GunRate[2] = 35;
Rate[0] = GunRate[0];
Rate[1] = GunRate[1];
Rate[2] = GunRate[2];

GunClip[0] = 20;//Gun clip size.
GunClip[1] = 5;
GunClip[2] = 100;
Clip[0] = GunClip[0];
Clip[1] = GunClip[1];
Clip[2] = GunClip[2];

GunReload[0] = 2;//Reload time in seconds.
GunReload[1] = 1;
GunReload[2] = 3;
Reload[0] = GunReload[0];
Reload[1] = GunReload[1];
Reload[2] = GunReload[2];


GunArc[0] = 15;//Gun arc in degrees
GunArc[1] = 8;
GunArc[2] = 2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player variables
// © 2017 - Jon Harvey

GunDirection = 90;
WalkDirection = 90;

TurnSpeed = 0;
WalkSpeedX = 0;
WalkSpeedY = 0;
WalkFrame = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screenshake variables
// © 2017 - Jon Harvey

Shake = 0;
ShakeX = 0;
ShakeY = 0;
ShakeAngle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gun controller
// © 2017 - Jon Harvey

Gun = ((Gun+keyboard_check_pressed(vk_space)) mod GunCount);

Rate[Gun] += DELTA;
Reload[Gun] += DELTA;

if mouse_check_button(mb_left)*GunAuto[Gun] || mouse_check_button_pressed(mb_left)*!GunAuto[Gun]
{
    if (Rate[Gun]&gt;1/GunRate[Gun] &amp;&amp; Reload[Gun]&gt;GunReload[Gun])
    {
        audio_play_sound(snd_gun,0,0);
        Rate[Gun] = 0;
        var Bullet = instance_create(x,y,obj_bullet);
        var Direction = GunDirection+(random(2)-1)*GunArc[Gun];
        Bullet.direction = Direction;
        Bullet.image_angle = Direction;
        Clip[Gun]--;
        if (Clip[Gun]&lt;=0)
        {
            Clip[Gun] = GunClip[Gun];
            Reload[Gun] = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player movement
// © 2017 - Jon Harvey

//Set controls for movement.
var Turn,Vert,Hor;
Turn = Kturnleft-Kturnright;
Vert = Kup-Kdown;
Hor = Kleft-Kright;

//Smooth delta timing variables.
var S90,S98;
S90 = power(0.90,FRAME_DELTA);
S98 = power(0.98,FRAME_DELTA);

//Smooth turn speed for turning motion.
TurnSpeed = TurnSpeed*S90+(1-S90)*Turn;

//Handle player turning gun and player direction.
WalkDirection += 2*TurnSpeed*FRAME_DELTA;
Turn = angle_difference(point_direction(x,y,mouse_x,mouse_y),GunDirection);
GunDirection += 0.1*Turn*FRAME_DELTA;

//Smooth walk using controls defined above.
var Speed,SpeedX,SpeedY;
Speed = max(sqrt(sqr(Hor)+sqr(Vert)),1);
SpeedX = Vert*dsin(view_angle[0])-Hor*dcos(-view_angle[0]);
SpeedY = Vert*dcos(view_angle[0])-Hor*dsin(-view_angle[0]);

WalkSpeedX = WalkSpeedX*S90+4*(1-S90)*(SpeedX*(dcos(GunDirection)*sign(SpeedX)*0.3+0.7))/Speed;
WalkSpeedY = WalkSpeedY*S90-4*(1-S90)*(SpeedY*(dsin(GunDirection)*sign(SpeedY)*0.3+0.7))/Speed;
x += FRAME_DELTA*WalkSpeedX;
y += FRAME_DELTA*WalkSpeedY;

//Update walk frame
var Speed = sqrt(sqr(WalkSpeedX)+sqr(WalkSpeedY));
WalkFrame = (WalkFrame+0.05*FRAME_DELTA*Speed)*(Speed&gt;5*DELTA);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///View and screenshake controller
// © 2017 - Jon Harvey

Shake = Shake*S98;
ShakeX = ShakeX*(1-S90)+S90*50*Shake*(random(2)-1);
ShakeY = ShakeY*(1-S90)+S90*50*Shake*(random(2)-1);
ShakeAngle = ShakeAngle*(1-S90)+S90*20*Shake*(random(2)-1);

//Smoothly translate and rotate view with player.
view_xview[0] = view_xview[0]*S90+(1-S90)*(x-view_wview[0]/2+ShakeX);
view_yview[0] = view_yview[0]*S90+(1-S90)*(y-view_hview[0]/2+ShakeY);
view_angle[0] = view_angle[0]*S98+(1-S98)*(90-WalkDirection+ShakeAngle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake Screen
Shake = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw gun info
// © 2017 - Jon Harvey

draw_sprite_ext(spr_gun,Gun,960,0,1,1,-10*max(1-Rate[Gun]*GunRate[Gun],0),-1,1);

draw_rectangle(8,8,72,24,1);
draw_rectangle(8,8,72-64*min(Clip[Gun]/GunClip[Gun],1),24,0);

draw_rectangle(8,32,72,48,1);
draw_rectangle(8,32,72-64*min(Reload[Gun]/GunReload[Gun],1),48,0);

draw_rectangle(8,56,72,72,1);
draw_rectangle(8,56,72-64*min(Rate[Gun]*GunRate[Gun],1),72,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player
// © 2017 - Jon Harvey

var Turn = angle_difference(point_direction(x,y,mouse_x,mouse_y),GunDirection);
var Direction = darctan2(-WalkSpeedY,WalkSpeedX);

draw_sprite_ext(spr_player_legs,WalkFrame,x,y,1,1,Direction,$FFFFFF,1);
draw_sprite_ext(spr_player_torso,1+sign(Turn)*(abs(Turn)&gt;15),x,y,1,1,GunDirection,$FFFFFF,1);
draw_sprite_ext(spr_player_head,0,x,y,1,1,GunDirection+0.6*Turn,$FFFFFF,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
