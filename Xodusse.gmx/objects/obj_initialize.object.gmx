<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-32768</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the game.

/*
    © 2017 - Jon Harvey, Reece Warren.
    MIT License.

    Game initialization event.

    obj_initialize is a persistent object that contains variables required
    for the game to run. This object is only created once through the creation code
    of rm_initialize.
*/

//DELTA TIMING:

globalvar DESIRED_FPS, DELTA, FRAME_DELTA, FRAME_DELTA_OVERRIDE, S90, S98,
F1, F1H, F1Q, F10, F30, F60;

DESIRED_FPS = 60;
DELTA = 1;
FRAME_DELTA = 1;

FRAME_DELTA_OVERRIDE = 1;

//SMOOTH DELTA TIMING.
S90 = power(0.90,FRAME_DELTA);
S98 = power(0.98,FRAME_DELTA);

//Seed:

//Fixed seed setting to real random - Jon
random_set_seed(9);
SEED = random_get_seed();

//show_debug_overlay(1);


/*
    -- Create Controller Objects:
 */

//Add key controlller - Jon
instance_create(0,0,obj_controller_keys);

//Add gun controlller - Jon
instance_create(0,0,obj_controller_guns);

//Add level controller - Reece
instance_create(0,0,obj_controller_level_selector);

//Add wave controller - Reece
instance_create(0,0,obj_controller_wave);

//Add console controller - Reece
instance_create(0,0,obj_controller_console);

//Add menu controller - Reece
instance_create(0,0,obj_controller_menu);

//GAME SETTINGS:
globalvar DEBUG_VISIBLE, CONSOLE_ENABLED, CHEAT_GODMODE;

CONSOLE_ENABLED = false;

DEBUG_VISIBLE = false;

CHEAT_GODMODE = false;

//GAME MEMORY USAGE:
//globalvar GM_MEMORY_USAGE_VIRTUAL, GM_MEMORY_USAGE_PHYSICAL, GM_CPU_USAGE;

//GM_MEMORY_USAGE_VIRTUAL = external_define("GM_Memory_Usage_Virtual.dll", "dll_get_memory_virtual", dll_cdecl, ty_real, 0);
//GM_MEMORY_USAGE_PHYSICAL = external_define("GM_Memory_Usage_Physical.dll", "dll_get_memory_physical", dll_cdecl, ty_real, 0); 

//DEFINE FONTS:
globalvar FNT_EXUDATION_LARGE, FNT_EXUDATION, FNT_EXUDATION_B;

FNT_EXUDATION_LARGE = fnt_Exudation_Large;
FNT_EXUDATION = fnt_Exudation;
FNT_EXUDATION_B = fnt_Exudation_b;

//FNT_DEBUGFONT = font_add_sprite_ext(spr_debugfont, ":.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ ", true, 2);

//DEFINE OTHER GAME VARIABLES:
globalvar PAUSED, VIEW_ANGLE;

PAUSED = false;
VIEW_ANGLE = 0;

//Set the cursor sprite:
window_set_cursor(cr_none);
//cursor_sprite = spr_Cursor_Free;

//GAME CONFIGURATION:

//LOADS VARIABLES FROM CONFIG:
//DEFINES VARIABLES IF CONFIG DOESN'T EXIST OR CANNOT BE READ:

if (file_exists("Config.Xodusse")){

    // -----
    
    DISPLAY_HRESOLUTION = display_get_width();
    DISPLAY_VRESOLUTION = display_get_height();
    DISPLAY_ASPECT = DISPLAY_HRESOLUTION / DISPLAY_VRESOLUTION;
    
    //LOAD VSYNC:
    scr_cread_vsync();  
  
    //LOAD INTERPOLATION:
    scr_cread_interpolation();
    
    //LOAD FXAA:
    scr_cread_fxaa();
    
    //LOAD FULLSCREEN
    scr_cread_fullscreen();
    
    //LOAD RESOLUTION:
    scr_cread_resolution();
    
    //LOAD SURFACE SCALE:
    scr_cread_surfacescale(); 
    
    //LOAD CONTROL MODE:
    scr_cread_controlmode();
    
    //LOAD GAMEPAD SETTING:
    scr_cread_gamepad();
    
}



//CREATE CONFIG FILE:
else {

    //DEFINE SETTINGS:
    // -----    
    
    DISPLAY_HRESOLUTION = display_get_width();
    DISPLAY_VRESOLUTION = display_get_height();
    DISPLAY_ASPECT = DISPLAY_HRESOLUTION / DISPLAY_VRESOLUTION;
    
    //VSync - Boolean;
    SETTING_VSYNC = true;
      
    //Texture interpolation - Boolean;
    SETTING_INTERPOLATION = true;
    
    //Anti-aliasing max - Real (Can return: [0 for unsupported], [2 for 2xAA], [6 for 2xAA &amp; 4xAA], [12 for 4xAA &amp; 8xAA] and [14 for 2xAA,4xAA &amp; 8xAA]);
    SETTING_FXAA_MAX = display_aa;
    
    //Anti-aliasing current - Real;
    SETTING_FXAA = 0;
    
    //Fullscreen - Boolean;
    SETTING_FULLSCREEN = false;
    
    //Resolution current - Real (Can return: [0 for 960x540], [1 for 1280x720], [2 for 1366x768], [3 for 1600x900], [4 for 1920x1080], [5 for 2560x1440], [6 for 3840x2160], [7 for DISPLAY_HRESOLUTIONxDISPLAY_VRESOLUTION]);
    SETTING_RESOLUTION = 0;
    
    //Surface Scale - Real (Can return: [1 for 1x], [2 for 2x], [4 for 4x].)
    SETTING_SURFACE_SCALE = 1;
    
    //Mouse control mode (Can return: [0 for Q&amp;E rotation], [1 for Mouse].):
    SETTING_CONTROL_MODE = 0;
    
    //Gamepad Enabled (Can return: [0 for keyboard], [1 for controller].):
    SETTING_GAMEPAD_ENABLED = 0;
        
    // -----

    //WRITE SETTINGS TO CONFIG:
    
    var Config_File = file_text_open_write(working_directory + "Config.Xodusse");
    
    //Assign Settings:
    var C_Vsync = SETTING_VSYNC;
    var C_Interpolation = SETTING_INTERPOLATION;
    var C_FXAA = SETTING_FXAA;
    var C_Fullscreen = SETTING_FULLSCREEN;
    var C_Resolution = SETTING_RESOLUTION;
    var C_SurfaceScale = SETTING_SURFACE_SCALE;
    var C_ControlMode = SETTING_CONTROL_MODE;
    var C_GamepadEnabled = SETTING_GAMEPAD_ENABLED;
    
    //Write Settings:
    file_text_write_string(Config_File, "[ XODUSSE CONFIGURATION ]");
    file_text_writeln(Config_File);
    file_text_writeln(Config_File);
    
    file_text_write_string(Config_File, "VSYNC: ");
    file_text_write_real(Config_File, C_Vsync);
    file_text_writeln(Config_File);
    
    file_text_write_string(Config_File, "INTERPOLATION: ");    
    file_text_write_real(Config_File, C_Interpolation);
    file_text_writeln(Config_File);
    
    file_text_write_string(Config_File, "FXAA: ");
    file_text_write_real(Config_File, C_FXAA);
    file_text_writeln(Config_File);
    
    file_text_write_string(Config_File, "FULLSCREEN: ");
    file_text_write_real(Config_File, C_Fullscreen);
    file_text_writeln(Config_File);
    
    file_text_write_string(Config_File, "RESOLUTION: ");
    file_text_write_real(Config_File, C_Resolution);
    file_text_writeln(Config_File);
    
    file_text_write_string(Config_File, "SURFACE SCALE: ");
    file_text_write_real(Config_File, C_SurfaceScale);
    file_text_writeln(Config_File);
    
    file_text_write_string(Config_File, "CONTROL MODE: ");
    file_text_write_real(Config_File, C_ControlMode);
    file_text_writeln(Config_File);
    
    file_text_write_string(Config_File, "GAMEPAD ENABLED: ");
    file_text_write_real(Config_File, C_GamepadEnabled);
    file_text_writeln(Config_File);
    
    file_text_close(Config_File);
}

globalvar GUIW,GUIH;

//Set window width: Can return: [0 for 960x540], [1 for 1280x720], [2 for 1366x768], [3 for 1600x900], [4 for 1920x1080], [5 for 2560x1440], [6 for 3840x2160], [7 for DISPLAY_HRESOLUTIONxDISPLAY_VRESOLUTION]
switch(SETTING_RESOLUTION){

    default:
    SETTING_RESOLUTION = 0;
    GUIW = 960;
    GUIH = 540;
    break;
    
    case 1:
    GUIW = 1280;
    GUIH = 720;
    break;
    
    case 2:
    GUIW = 1366;
    GUIH = 768;
    break;
    
    case 3:
    GUIW = 1600;
    GUIH = 900;
    break;
    
    case 4:
    GUIW = 1920;
    GUIH = 1080;
    break;
    
    case 5:
    GUIW = 2560;
    GUIH = 1440;
    break;
    
    case 6:
    GUIW = 3840;
    GUIH = 2160;
    break;
    
    case 7:
    GUIW = DISPLAY_HRESOLUTION;
    GUIH = DISPLAY_VRESOLUTION;
    break;
}
    
if (SETTING_FULLSCREEN == true){   
    SETTING_RESOLUTION = 7;
    GUIW = DISPLAY_HRESOLUTION;
    GUIH = DISPLAY_VRESOLUTION;
}
  
if (DISPLAY_HRESOLUTION &lt; GUIW) || (DISPLAY_VRESOLUTION &lt; GUIH){

    SETTING_RESOLUTION = 0;
    GUIW = 960;
    GUIH = 540;
    
    if (DISPLAY_HRESOLUTION &lt; GUIW) || (DISPLAY_VRESOLUTION &lt; GUIH){
        
        SETTING_RESOLUTION = 7;
        GUIW = DISPLAY_HRESOLUTION;
        GUIH = DISPLAY_VRESOLUTION;
    }
}

var Scale;
Scale = SETTING_SURFACE_SCALE;

display_set_gui_size(GUIW,GUIH);
window_set_size(GUIW,GUIH);
            
view_wport[0] = GUIW;
view_hport[0] = GUIH;

surface_resize(application_surface,GUIW*Scale,GUIH*Scale);


//Reset the display:
display_reset(SETTING_FXAA, SETTING_VSYNC);
 
//Turn off texture interpolation:
texture_set_interpolation(SETTING_INTERPOLATION);

//Set fullscreen mode:
window_set_fullscreen(SETTING_FULLSCREEN);

//THESE CONTROLLER OBJECTS MUST BE CREATED AFTER INITIALISING THE GUI:

//Add cursor controller - Reece
instance_create(0,0,obj_controller_cursor);

//Add debug profiler - Reece
instance_create(0,0,obj_controller_debugger);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delta time variables.
// © 2017 - Jon Harvey, Reece Warren

DELTA_OVERRIDE = (delta_time / 1000000);
DELTA = DELTA_OVERRIDE*!PAUSED;

//Some objects still need to function when the game is paused:
FRAME_DELTA_OVERRIDE = DESIRED_FPS * DELTA_OVERRIDE;
FRAME_DELTA = DESIRED_FPS * DELTA;

//Smoothing:
S90 = power(0.90,FRAME_DELTA);
S98 = power(0.98,FRAME_DELTA);

//Image_Speed calculation variables - Reece:

//1 Second frame update:
F1  = (1/DESIRED_FPS) * FRAME_DELTA;
//Half Second frame update:
F1H = (2/DESIRED_FPS) * FRAME_DELTA;
//Quarter Second frame update:
F1Q = (4/DESIRED_FPS) * FRAME_DELTA;
//10th Second frame update:
F10 = (10/DESIRED_FPS) * FRAME_DELTA;
//30th Second frame update:
F30 = (30/DESIRED_FPS) * FRAME_DELTA;
//60th Second frame update:
F60 = (60/DESIRED_FPS) * FRAME_DELTA;

//Update View Angle:
VIEW_ANGLE = view_angle[0] % 360;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the resolution of the window and view:
//© 2017 - Reece Warren

//Set window width:
if (SETTING_RESOLUTION == 0){
    window_set_size(960,540);
    view_wport[0] = 960;
    view_hport[0] = 540;
    view_wview[0] = 960;
    view_hview[0] = 540;
    surface_resize(application_surface, 960*SETTING_SURFACE_SCALE, 540*SETTING_SURFACE_SCALE);
}

else if (SETTING_RESOLUTION == 1){
    window_set_size(1280,720);
    view_wport[0] = 1280;
    view_hport[0] = 720;
    view_wview[0] = 960;
    view_hview[0] = 540;    
    surface_resize(application_surface, 1280*SETTING_SURFACE_SCALE, 720*SETTING_SURFACE_SCALE);
}

else if (SETTING_RESOLUTION == 2){
    window_set_size(1366,768);
    view_wport[0] = 1366;
    view_hport[0] = 768;
    view_wview[0] = 960;
    view_hview[0] = 540; 
    surface_resize(application_surface, 1366*SETTING_SURFACE_SCALE, 768*SETTING_SURFACE_SCALE);
}

else if (SETTING_RESOLUTION == 3){
    window_set_size(1600,900);
    view_wport[0] = 1600;
    view_hport[0] = 900;
    view_wview[0] = 960;
    view_hview[0] = 540; 
    surface_resize(application_surface, 1600*SETTING_SURFACE_SCALE, 900*SETTING_SURFACE_SCALE);
}

else if (SETTING_RESOLUTION == 4){
    window_set_size(1920,1080);
    view_wport[0] = 1920;
    view_hport[0] = 1080;
    view_wview[0] = 960;
    view_hview[0] = 540; 
    surface_resize(application_surface, 1920*SETTING_SURFACE_SCALE, 1080*SETTING_SURFACE_SCALE);
}

else if (SETTING_RESOLUTION == 5){
    window_set_size(2560,1440);
    view_wport[0] = 2560;
    view_hport[0] = 1440;
    view_wview[0] = 960;
    view_hview[0] = 540; 
    surface_resize(application_surface, 2560*SETTING_SURFACE_SCALE, 1440*SETTING_SURFACE_SCALE);
}

else if (SETTING_RESOLUTION == 6){
    window_set_size(3840,2160);
    view_wport[0] = 3840;
    view_hport[0] = 2160;
    view_wview[0] = 960;
    view_hview[0] = 540; 
    surface_resize(application_surface, 3840*SETTING_SURFACE_SCALE, 2160*SETTING_SURFACE_SCALE);
}

else if (SETTING_RESOLUTION == 7){
    window_set_size(DISPLAY_HRESOLUTION,DISPLAY_VRESOLUTION);
    view_wport[0] = DISPLAY_HRESOLUTION;
    view_hport[0] = DISPLAY_VRESOLUTION;
    view_wview[0] = 960;
    view_hview[0] = 540; 
    surface_resize(application_surface, DISPLAY_HRESOLUTION*SETTING_SURFACE_SCALE, DISPLAY_VRESOLUTION*SETTING_SURFACE_SCALE);
}    

else {

    ///TODO:
        //Detect the maximum resolution and determine if config value is lower:
        
    window_set_size(960,540);
    view_wport[0] = 960;
    view_hport[0] = 540;
    surface_resize(application_surface, 960*SETTING_SURFACE_SCALE, 540*SETTING_SURFACE_SCALE); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
