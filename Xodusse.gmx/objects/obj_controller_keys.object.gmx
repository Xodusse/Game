<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-50</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set key defaults
// © 2017 - Jon Harvey

//Set up key ids.
KIleft = ord("A");
KIright = ord("D");
KIup = ord("W");
KIdown = ord("S");
KIturnleft = ord("Q");
KIturnright = ord("E");
KImelee = vk_space;
KIreload = ord("R");
KIinventory = ord("F");

//© 2017 - Reece Warren
//Function Keys:
KIreset = vk_f5;
KIdebug = vk_f3;
KIescape = vk_escape;
KIconsole = 191;

//Set number keys.
KI1 = ord("1");
KI2 = ord("2");
KI3 = ord("3");
KI4 = ord("4");
KI5 = ord("5");
KI6 = ord("6");

//-

//Keyboard press variables.
globalvar Kleft,Kright,Kup,Kdown,Kturnleft,Kturnright,Kmelee,Kreload,Kinventory,Kreset,Kdebug,Kescape,Kconsole,K1,K2,K3,K4,K5,K6;
Kleft = 0;
Kright = 0;
Kup = 0;
Kdown = 0;
Kturnleft = 0;
Kturnright = 0;
Kmelee = 0;
Kreload = 0;
Kinventory = 0;

Kreset = 0;
Kdebug = 0;
Kescape = 0;
Kconsole = 0;

//Set number keys.
K1 = 0;
K2 = 0;
K3 = 0;
K4 = 0;
K5 = 0;
K6 = 0;

//Variable for key being mapped.
Kmap = 0;
Kassign = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update keypresses
// © 2017 - Jon Harvey

//Set key to be assigned whenever a key is released.
if keyboard_check_released(vk_anykey)
{
    Kmap = keyboard_lastkey;
}

//Change key
if Kassign &amp;&amp; keyboard_key
{
    switch(Kmap)
    {
        case KIleft:
        KIleft = keyboard_key;
        break;
        case KIright:
        KIright = keyboard_key;
        break;
        case KIup:
        KIup = keyboard_key;
        break;
        case KIdown:
        KIdown = keyboard_key;
        break;
        case KIturnleft:
        KIturnleft = keyboard_key;
        break;
        case KIturnright:
        KIturnright = keyboard_key;
        break;
        case KImelee:
        KImelee = keyboard_key;
        break;
        case KIreload:
        KIreload = keyboard_key;
        break;
        //© 2017 - Reece Warren
        //Function Keys:
        case KIreset:
        KIreset = keyboard_key;
        break;
        case KIdebug:
        KIdebug = keyboard_key;
        break;
        case KIescape:
        KIescape = keyboard_key;
        break;
        case KIconsole:
        KIconsole = keyboard_key;
        break;
        case KIinventory:
        KIinventory = keyboard_key;
        break;
    }
    Kassign = 0;
    Kmap = 0;
}

//Check all keys

Kleft = keyboard_check(KIleft)*                   !CONSOLE_ENABLED;
Kright = keyboard_check(KIright)*                 !CONSOLE_ENABLED;
Kup = keyboard_check(KIup)*                       !CONSOLE_ENABLED;
Kdown = keyboard_check(KIdown)*                   !CONSOLE_ENABLED;
Kturnleft = keyboard_check(KIturnleft)*           !CONSOLE_ENABLED;
Kturnright = keyboard_check(KIturnright)*         !CONSOLE_ENABLED;
Kmelee = keyboard_check_pressed(KImelee)*         !CONSOLE_ENABLED;
Kreload = keyboard_check_released(KIreload)*      !CONSOLE_ENABLED;
Kinventory = keyboard_check_released(KIinventory)*!CONSOLE_ENABLED;

//© 2017 - Reece Warren
//Function Keys:
Kreset = keyboard_check_released(KIreset)*!CONSOLE_ENABLED;
Kdebug = keyboard_check_released(KIdebug)*!CONSOLE_ENABLED;

Kconsole = keyboard_check_released(KIconsole);
Kescape = keyboard_check_released(KIescape);

//Number keys:
K1 = keyboard_check_released(KI1)*!CONSOLE_ENABLED;
K2 = keyboard_check_released(KI2)*!CONSOLE_ENABLED;
K3 = keyboard_check_released(KI3)*!CONSOLE_ENABLED;
K4 = keyboard_check_released(KI4)*!CONSOLE_ENABLED;
K5 = keyboard_check_released(KI5)*!CONSOLE_ENABLED;
K6 = keyboard_check_released(KI6)*!CONSOLE_ENABLED;

//Quit game
if !(CONSOLE_ENABLED) &amp;&amp; (Kescape) {

if !(CONSOLE_ENABLED) &amp;&amp; (Kescape) &amp;&amp; (room != rm_main) &amp;&amp; (room != rm_game) &amp;&amp; (room != rm_options) {
    PAUSED = !PAUSED;
    
    //Create pause menu buttons:
    if (PAUSED == true){
    
        var button0 = instance_create(
            (view_xview[0]+(view_wview[0]/2)),
            (view_yview[0]+(view_hview[0]/2)),
            obj_button_pause);
        button0.BUTTON_TYPE = 0;
        
        var button0 = instance_create(
            (view_xview[0]+(view_wview[0]/2))-(dcos(VIEW_ANGLE+90)*-64),
            (view_yview[0]+(view_hview[0]/2))-(dsin(VIEW_ANGLE+90)*-64),
            obj_button_pause);
        button0.BUTTON_TYPE = 1;
        
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
