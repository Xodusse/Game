<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button_large</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-55</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI Buttons:
//© 2017 - Reece Warren

//Button type determines the function of the button:

//0 = Solo,
//1 = Coop,
//2 = Options,
//3 = Quit,
//4 = Back to main:

//NOTE:
    //Button types for main menu buttons are set in object creation code:

BUTTON_TYPE = 0;
image_speed = 0;

Hover = false;
Clicked = false;

Extender = 64;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hover highlighting
// © 2017 - Jon Harvey

/*
    This makes the button hightlight when hovering over and controls mouse clicks.
*/

//Reece - Assigned the hover state to a variable so it can be used to control animations:
Hover = point_in_rectangle(mouse_x,mouse_y,x-128,y-16,x+128,y+16);

if (Hover == true){
    if !(Extender &gt; 128){
        Extender += 8 * FRAME_DELTA;
    }
}

else {
    if (Extender &gt; 64){
        Extender -= 16 * FRAME_DELTA;
    }
    else {
        Extender = 64;
    }
}
    
//Detect mouse press - Reece:
if (Hover == true) &amp;&amp; (mouse_check_button_released(mb_left)){
    ///GUI Button functions:
    //© 2017 - Reece Warren
    
    //Play Solo:
    if (BUTTON_TYPE == 0){
        room_goto(rm_test1);
        
        //Resets the wave controller:
        AlienCountRemaining = AlienCountInitial;
    }
    
    //Play Coop:
    else if (BUTTON_TYPE == 1){
        room_goto(rm_game);
    }
    
    //Options:
    else if (BUTTON_TYPE == 2){
        room_goto(rm_options);
    }
    
    //Quit:
    else if (BUTTON_TYPE == 3){
        game_end();
    }
    
    //Back to main:
    else if (BUTTON_TYPE == 4){
        room_goto(rm_main);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//© 2017 - Reece Warren
//GUI Buttons:

//draw_self();

draw_set_colour($000000);

//Set draw settings:
draw_set_font(fnt_Exudation_Large);

//Draw the button styling:

//Animate on hover:
if (Hover == true){
    //Extend the button if it is not the full size:
    if !(Extender &gt; 128){
        draw_rectangle_colour(x-128,y-16,x+Extender,y+16,$000000,$600000,$600000,$000000,false);
        draw_triangle_colour(x+Extender,y-16,x+Extender,y+16,x+Extender+16,y-16,$F6D22A,$F6D22A,$F6D22A,false);
        draw_triangle_colour(x+Extender,y-16,x+Extender-16,y+16,x+Extender,y+16,$F6D22A,$F6D22A,$F6D22A,false);
        draw_set_colour($FFFF00);
    }
    //Otherwise, draw it at a fixed size:
    else {
        draw_rectangle_colour(x-128,y-16,x+Extender,y+16,$000000,$600000,$600000,$000000,false);
        draw_triangle_colour(x+Extender,y-16,x+Extender,y+16,x+Extender+16,y-16,$F6D22A,$F6D22A,$F6D22A,false);
        draw_triangle_colour(x+Extender,y-16,x+Extender-16,y+16,x+Extender,y+16,$F6D22A,$F6D22A,$F6D22A,false);
        draw_set_colour($FFFF00);
    }    
}

//If not hovered on, draw a standard button:
else {
    draw_rectangle(x-128,y-16,x+Extender,y+16,false);
    draw_triangle(x+Extender,y-16,x+Extender,y+16,x+Extender+16,y-16,false);
    draw_set_colour($FFFFFF);
}

//Set the text drawing configuration:
draw_set_halign(fa_left);
draw_set_valign(fa_middle);

//Draw button text:
if (BUTTON_TYPE == 0){
    draw_text(x+((1/4)*Extender)-112,y,"Single Player");
}
else if (BUTTON_TYPE == 1){
    draw_text(x+((1/4)*Extender)-112,y,"Multiplayer");
}
else if (BUTTON_TYPE == 2){
    draw_text(x+((1/4)*Extender)-112,y,"Options");
}
else if (BUTTON_TYPE == 3){
    draw_text(x+((1/4)*Extender)-112,y,"Quit");
}
else if (BUTTON_TYPE == 4){
    draw_text(x+((1/4)*Extender)-112,y,"Back");
}

//Revert draw settings:
draw_set_font(-1);
draw_set_colour(-1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
