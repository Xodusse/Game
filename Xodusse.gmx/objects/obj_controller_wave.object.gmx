<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wave variables
// © 2017 - Jon Harvey,Reece Warren

globalvar AlienCountInitial,AlienCountRemaining,AlienMax,AlienCountCurrent,Wave;

AlienCountInitial = 20;
AlienCountRemaining = AlienCountInitial;
AlienMax = 10;
AlienCountCurrent = 0;

Wave = 1;
WaveNumber = 1;

//Boolean variable for wave delay:
WaveDelay = false;
WaveDelayTimer = 10;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Wave Control
// © 2017 - Reece Warren, Jon Harvey

//Only spawn aliens and perform calculations if in the game room:
if (room == rm_test1) || (room == rm_game_0){
    
    if (instance_exists(obj_enemy)){
        AlienCountCurrent = instance_number(obj_enemy);
    }
    
    else {
        AlienCountCurrent = 0;
    }
    
    //Spawn more aliens if under the memory allocation and there are aliens in the current wave left to spawn:
    if (AlienCountCurrent &lt; AlienMax) &amp;&amp; (AlienCountRemaining &gt; 0){   
        //Deduct an alien from the wave count:
        AlienCountRemaining--;
        //Spawn the alien:
        var S1,S2;
        S1 = irandom(1);
        S2 = irandom(1);
        instance_create(irandom(3968)*S1+(3968)*!S1*S2-960,irandom(3968)*!S1+(3968)*S1*S2-960,obj_enemy);
    }
    
    //Starts the wave delay timer:
    if (AlienCountCurrent == 0) &amp;&amp; (AlienCountRemaining == 0) &amp;&amp; (WaveDelay == false){
        
        //Trigger the Wave Delay:
        WaveDelay = true;
        WaveDelayTimer = 10;       
    }
    
    //Update the wave delay timer:
    if (WaveDelay == true){
        
        WaveDelayTimer -= DELTA;
        
        //Starts a new wave:
        if (WaveDelayTimer &lt;= 0){
            Wave ++;
            WaveNumber += 1;
        
            //Adds five aliens each wave:
            AlienCountRemaining = AlienCountInitial + ((Wave - 1) * 5);
            
            var roundnot = instance_create(0,0,obj_round_notification);
            roundnot.Round_Number = Wave;
            
            WaveDelay = false;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//© 2017 - Reece Warren
//Reset wave at game start:
Wave = 1;
WaveNumber = 1;

AlienCountRemaining = AlienCountInitial;

if (room == rm_game_0) || (room == rm_game_1){
    var roundnot = instance_create(0,0,obj_round_notification);
    roundnot.Round_Number = Wave;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
