<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_alien_0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_collider</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI variables
// © 2017 - Jon Harvey

//Variables for estimating player position.
AiTargetX = 1024;
AiTargetY = 1024;
AiTargetSpeedX = 0;
AiTargetSpeedY = 0;
AiTargetRadius = 0;

//Enemy behavior
AiSight = 512;
AiFocus = 1;
AiVigor = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy variables
// © 2017 - Jon Harvey

WalkTurn = 0;
WalkDirection = 0;

Speed = 1;
SpeedX = 0;
SpeedY = 0;

Radius = 16;

Time = random(10000);
Health = 0.8+random(0.4);
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI control
// © 2017 - Jon Harvey

Time += DELTA;
 
AiTargetSpeedX *= S98;
AiTargetSpeedY *= S98;
AiTargetSpeedX += (1-S98)*.001*cos(Time/2)*AiTargetRadius;
AiTargetSpeedY += (1-S98)*.001*sin(Time/2)*AiTargetRadius;
AiTargetX += FRAME_DELTA*AiTargetSpeedX;
AiTargetY += FRAME_DELTA*AiTargetSpeedY;

if instance_exists(obj_player){
    
    var Visible = (point_distance(obj_player.x,obj_player.y,x+dcos(WalkDirection)*AiSight,y-dsin(WalkDirection)*AiSight)&lt;AiSight) &amp;&amp;
    ((collision_line(obj_player.x,obj_player.y,x,y,obj_wall,0,1) == noone));
            
    if Visible{
        
        AiVigor = AiVigor*S90+(1-S90);
        AiFocus = AiFocus*S90+(1-S90);
        AiTargetRadius = AiTargetRadius*S90;
        Speed = Speed*S90+(1-S90);
        AiTargetSpeedX = obj_player.SpeedX;
        AiTargetSpeedY = obj_player.SpeedY;
        AiTargetX = obj_player.x;
        AiTargetY = obj_player.y;
    }
    else{
        
        AiVigor = AiVigor*S98;
        AiFocus *= 1-(1-S90)*(point_distance(x,y,AiTargetX,AiTargetY)&lt;AiTargetRadius/(8+3*cos(Time/12)));
        AiTargetRadius = AiTargetRadius*sqrt(S98)+(1-sqrt(S98))*300;
    }
    
    WalkTurn = WalkTurn*S90+(1-S90)*(0.1*AiFocus*angle_difference(point_direction(x,y,AiTargetX,AiTargetY),WalkDirection))+
    //Look around randomly
    (1-S90)*((1-AiFocus)*min(power(cos(Time/2.8),5)*power(cos(Time/3.7),4)*power(cos(Time/12.4),4),.5));
    WalkDirection += FRAME_DELTA*WalkTurn;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy movement
// © 2017 - Jon Harvey

image_angle = WalkDirection;

//Set initial speed.
var SumX,SumY;
SumX =  Speed*dcos(WalkDirection);
SumY = -Speed*dsin(WalkDirection);

//Get pushed by enemies.
for(var i = instance_number(obj_collider);i&gt;=0;i--){

    var Inst = instance_find(obj_collider,i);
    if (Inst!=id) &amp;&amp; (Inst!=noone){
    
        var Distance,Over;
        Distance = point_distance(x+SpeedX,y+SpeedY,Inst.x+Inst.SpeedX,Inst.y+Inst.SpeedY);
        Over = Distance-(Radius+Inst.Radius);

        var DistanceLeft,DistanceRight;
        DistanceLeft  = point_distance(x+dcos(WalkDirection+60)*5+SpeedX*5,y-dsin(WalkDirection+60)*5+SpeedY*5,Inst.x+Inst.SpeedX,Inst.y+Inst.SpeedY);
        DistanceRight = point_distance(x+dcos(WalkDirection-60)*5+SpeedX*5,y-dsin(WalkDirection-60)*5+SpeedY*5,Inst.x+Inst.SpeedX,Inst.y+Inst.SpeedY);
        WalkTurn += (DistanceLeft-DistanceRight)/(Over+5)/2;
        
        if (Over&lt;0){
        
            var NormX = (x+SpeedX-(Inst.x+Inst.SpeedX))/Distance;
            var NormY = (y+SpeedY-(Inst.y+Inst.SpeedY))/Distance;
            SumX -= NormX*Over;
            SumY -= NormY*Over;
        }
    }
}
//Move smoothly and with delta timing.
var MoveSlow,MoveAble;
MoveSlow = 1+4*(instance_position(x,y,obj_barrel_puddle) != noone);
MoveAble = AiFocus*(AiVigor*.4+1);

SpeedX = SpeedX*S90+(1-S90)*(SumX*MoveAble/MoveSlow);
SpeedY = SpeedY*S90+(1-S90)*(SumY*MoveAble/MoveSlow);
x += SpeedX*FRAME_DELTA;
y += SpeedY*FRAME_DELTA;

image_index += sqrt(sqr(SpeedX)+sqr(SpeedY))*DELTA*4;

//Check health.
if Health&lt;=0
{
    //Play death sound 50% chance:
    var chance = irandom(100);
    if (chance &lt;= 50){   
        if (instance_exists(obj_player)){
            if (distance_to_object(obj_player) &lt;= 500){
                var deathsound = choose(0,1,2,3,4);
                audio_play_sound(
                    asset_get_index("snd_enemy_death_" + string(deathsound)), 1, false);
                
                //Drop ammo.
                if !irandom(8){
                    var Type = irandom(3);
                    scr_inventory_drop(Idoubles*2+Isingles+Igrenades+1+Type,ceil(sqrt(random(1))*Gcap[Type]),x,y,SpeedX,SpeedY);
                }
            }
        }
    }
        
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage player
// © 2017 - Jon Harvey
if (AiFocus&gt;.5){

    obj_player.Health -= random(.02)*FRAME_DELTA;
    Shake = .2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw enemy sprite:
scr_lighting_draw_sprite(spr_alien_0,spr_alien_0_n,spr_alien_0_she,image_index,x,y,1,1,image_angle-90,-1,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
