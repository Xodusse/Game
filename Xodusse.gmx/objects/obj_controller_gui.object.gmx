<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screenshake variables
// © 2017 - Jon Harvey

globalvar Shake;
Shake = 0;
ShakeX = 0;
ShakeY = 0;
ShakeAngle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///View and screenshake controller
// © 2017 - Jon Harvey

Shake = Shake*S90;
ShakeX = ShakeX*(1-S90)+S90*50*Shake*(random(2)-1);
ShakeY = ShakeY*(1-S90)+S90*50*Shake*(random(2)-1);
ShakeAngle = ShakeAngle*(1-S90)+S90*20*Shake*(random(2)-1);

if instance_exists(obj_player){
    
    //Smoothly translate and rotate view with the player.
    view_xview[0] = view_xview[0]*S90+(1-S90)*(obj_player.x-view_wview[0]/2+ShakeX);
    view_yview[0] = view_yview[0]*S90+(1-S90)*(obj_player.y-view_hview[0]/2+ShakeY);
    view_angle[0] = view_angle[0]*S98+(1-S98)*(90-obj_player.WalkDirection+ShakeAngle);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw gun info
// © 2017 - Jon Harvey

if instance_exists(obj_player){

    with(obj_player){
    
        draw_set_alpha(0.6);
        draw_circle_colour(0,540,60,$222222,$333333,0);
        draw_set_alpha(1);
        
        draw_primitive_begin(pr_trianglestrip);
        for(var i = 0;i&lt;=30;i++){
            
            var Angle = i*3*min(Reload[Gcurrent]/Greload[G[Gcurrent]],1);
            draw_vertex_colour(dcos(Angle)*150,540-dsin(Angle)*150,$444499,0.6);
            draw_vertex_colour(dcos(Angle)*60,540-dsin(Angle)*60,$333333,0.6);
        }
        draw_primitive_end();
        
        var Angle;
        Angle = 30*Gswap-45;
        draw_sprite_ext(spr_gun,G[Gcurrent],dcos(Angle)*140,540+dsin(Angle)*140,1,1,-Angle,-1,1);
        draw_sprite_ext(spr_gun,G[(Gcurrent+1)%Gcount],dcos(Angle-30)*140,540+dsin(Angle-30)*140,1,1,30-Angle,-1,0.5+Gswap);
        draw_sprite_ext(spr_gun,G[(Gcurrent+Gcount-1)%Gcount],dcos(Angle+30)*140,540+dsin(Angle+30)*140,1,1,-30-Angle,-1,0.5-Gswap);
        
        draw_text(2,500,string(max(Clips[Gcurrent],0)));
        draw_text(4,516,string(Clip[Gcurrent])+"/"+string(Gclip[G[Gcurrent]]));

        draw_rectangle(860,500,940,520,1);        
        draw_rectangle(860,500,860+clamp(Health,0,10)*8,520,0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
