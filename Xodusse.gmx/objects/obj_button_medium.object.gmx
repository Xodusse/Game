<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button_medium</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI Buttons:
//© 2017 - Reece Warren

//Button type determines the function of the button:

//0 = Vsync,
//1 = Interpolation,
//2 = FXAA,
//3 = Fullscreen,
//4 = Resolution:

//NOTE:
    //Button types for main menu buttons are set in object creation code:

BUTTON_TYPE = 0;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hover highlighting
// © 2017 - Jon Harvey
/*
    This makes the button hightlight when hovering over and controls mouse clicks.
*/

image_index = point_in_rectangle(mouse_x,mouse_y,x-96,y-32,x+96,y+32);

//Detect mouse press and perform button action - Reece:
if (image_index &amp;&amp; mouse_check_button_released(mb_left)){
    ///GUI Button functions:
    //© 2017 - Reece Warren
    
    //VSYNC:
    if (BUTTON_TYPE == 0){
        obj_initialize.SETTING_VSYNC = !obj_initialize.SETTING_VSYNC;
        display_reset(obj_initialize.SETTING_FXAA, obj_initialize.SETTING_VSYNC);
    }
    
    //Interpolation:
    else if (BUTTON_TYPE == 1){
        obj_initialize.SETTING_INTERPOLATION = !obj_initialize.SETTING_INTERPOLATION;
        texture_set_interpolation(obj_initialize.SETTING_INTERPOLATION);
    }
    
    //FXAA:
    else if (BUTTON_TYPE == 2){
        //0 to 2:
        if (obj_initialize.SETTING_FXAA == 0) &amp;&amp; (obj_initialize.SETTING_FXAA_MAX &gt; 0) &amp;&amp; (obj_initialize.SETTING_FXAA_MAX != 12){
            obj_initialize.SETTING_FXAA = 2;
        }
        //0 to 4:
        else if (obj_initialize.SETTING_FXAA == 0) &amp;&amp; (obj_initialize.SETTING_FXAA_MAX &gt; 0){
            obj_initialize.SETTING_FXAA = 4;
        }
        //2 to 4:
        else if (obj_initialize.SETTING_FXAA == 2) &amp;&amp; (obj_initialize.SETTING_FXAA_MAX &gt;= 6){
            obj_initialize.SETTING_FXAA = 4;
        }
        //4 to 8:
        else if (obj_initialize.SETTING_FXAA == 4) &amp;&amp; (obj_initialize.SETTING_FXAA_MAX &gt;= 12){
            obj_initialize.SETTING_FXAA = 8;
        }
        //2 to 4:
        else if (obj_initialize.SETTING_FXAA == 4) &amp;&amp; (obj_initialize.SETTING_FXAA_MAX == 14){
            obj_initialize.SETTING_FXAA = 8;
        }
        else {
            obj_initialize.SETTING_FXAA = 0;
        }
        display_reset(obj_initialize.SETTING_FXAA, obj_initialize.SETTING_VSYNC);                      
    }
    
    //Fullscreen
    else if (BUTTON_TYPE == 3){
        obj_initialize.SETTING_FULLSCREEN = !obj_initialize.SETTING_FULLSCREEN;
        window_set_fullscreen(obj_initialize.SETTING_FULLSCREEN);
        
        if (obj_initialize.SETTING_FULLSCREEN == true){
        
            //ENABLE FULLSCREEN RESOLUTION MODE:
            obj_initialize.SETTING_RESOLUTION = 7;
            
            GUIW = obj_initialize.DISPLAY_HRESOLUTION;
            GUIH = obj_initialize.DISPLAY_VRESOLUTION;
            
            display_set_gui_size(GUIW,GUIH);
            
            view_wport[0] = obj_initialize.DISPLAY_HRESOLUTION;
            view_hport[0] = obj_initialize.DISPLAY_VRESOLUTION;             
        }
        
        else {
            //Set window width:
            obj_initialize.SETTING_RESOLUTION = 0;
            
            GUIW = 960;
            GUIH = 540;
                   
            display_set_gui_size(GUIW,GUIH);              
            window_set_size(960,540); 
                       
            view_wport[0] = 960;
            view_hport[0] = 540;
                        
        }
        
        //Reset the display after altering fullscreen mode:    
        display_reset(obj_initialize.SETTING_FXAA, obj_initialize.SETTING_VSYNC);                              
    }
    
    //Toggle Resolution (only if not in fullscreen mode):
    else if (BUTTON_TYPE == 4) &amp;&amp; (obj_initialize.SETTING_RESOLUTION != 7) {
        if (obj_initialize.SETTING_RESOLUTION == 0){
            
            if (obj_initialize.DISPLAY_HRESOLUTION &gt;= 1280) &amp;&amp; (obj_initialize.DISPLAY_VRESOLUTION &gt;= 720){
                obj_initialize.SETTING_RESOLUTION = 1;
                
                GUIW = 1280;
                GUIH = 720;        
                display_set_gui_size(GUIW,GUIH);
                window_set_size(1280,720);
                
                view_wport[0] = 1280;
                view_hport[0] = 720;
            }
            
            else {
                obj_initialize.SETTING_RESOLUTION = 0;
                
                GUIW = 960;
                GUIH = 540;        
                display_set_gui_size(GUIW,GUIH);
                window_set_size(960,540);
                
                view_wport[0] = 960;
                view_hport[0] = 540;
            }                              
        }
        
        else if (obj_initialize.SETTING_RESOLUTION == 1){
            if (obj_initialize.DISPLAY_HRESOLUTION &gt;= 1366) &amp;&amp; (obj_initialize.DISPLAY_VRESOLUTION &gt;= 768){
                obj_initialize.SETTING_RESOLUTION = 2;
                
                GUIW = 1366;
                GUIH = 768;        
                display_set_gui_size(GUIW,GUIH);
                window_set_size(1366,768);
                
                view_wport[0] = 1366;
                view_hport[0] = 768;
            }
            
            else {
                obj_initialize.SETTING_RESOLUTION = 0;
                
                GUIW = 960;
                GUIH = 540;        
                display_set_gui_size(GUIW,GUIH);
                window_set_size(960,540);
                
                view_wport[0] = 960;
                view_hport[0] = 540;
            }                 
        }
        
        else if (obj_initialize.SETTING_RESOLUTION == 2){
            if (obj_initialize.DISPLAY_HRESOLUTION &gt;= 1600) &amp;&amp; (obj_initialize.DISPLAY_VRESOLUTION &gt;= 900){
                obj_initialize.SETTING_RESOLUTION = 3;
                
                GUIW = 1600;
                GUIH = 900;        
                display_set_gui_size(GUIW,GUIH);
                window_set_size(1600,900);
                
                view_wport[0] = 1600;
                view_hport[0] = 900;
            }
            else {
                obj_initialize.SETTING_RESOLUTION = 0;
                
                GUIW = 960;
                GUIH = 540;        
                display_set_gui_size(GUIW,GUIH);
                window_set_size(960,540);
                
                view_wport[0] = 960;
                view_hport[0] = 540;
            }                               
        }
        
        else if (obj_initialize.SETTING_RESOLUTION == 3){
            if (obj_initialize.DISPLAY_HRESOLUTION &gt;= 1920) &amp;&amp; (obj_initialize.DISPLAY_VRESOLUTION &gt;= 1080){        
                obj_initialize.SETTING_RESOLUTION = 4;
                
                GUIW = 1920;
                GUIH = 1080;        
                display_set_gui_size(GUIW,GUIH);
                window_set_size(1920,1080);
                
                view_wport[0] = 1920;
                view_hport[0] = 1080; 
            }
            else {
                obj_initialize.SETTING_RESOLUTION = 0;
                
                GUIW = 960;
                GUIH = 540;        
                display_set_gui_size(GUIW,GUIH);
                window_set_size(960,540);
                
                view_wport[0] = 960;
                view_hport[0] = 540;
            }                              
        }
        
        else if (obj_initialize.SETTING_RESOLUTION == 4){
            if (obj_initialize.DISPLAY_HRESOLUTION &gt;= 2560) &amp;&amp; (obj_initialize.DISPLAY_VRESOLUTION &gt;= 1440){        
                obj_initialize.SETTING_RESOLUTION = 5;
                
                GUIW = 2560;
                GUIH = 1440;        
                display_set_gui_size(GUIW,GUIH);
                window_set_size(2560,1440);
                
                view_wport[0] = 2560;
                view_hport[0] = 1440;
            }
            else {
                obj_initialize.SETTING_RESOLUTION = 0;
                
                GUIW = 960;
                GUIH = 540;        
                display_set_gui_size(GUIW,GUIH);
                window_set_size(960,540);
                
                view_wport[0] = 960;
                view_hport[0] = 540;
            }                             
        }
        
        else if (obj_initialize.SETTING_RESOLUTION == 5){
            if (obj_initialize.DISPLAY_HRESOLUTION &gt;= 3840) &amp;&amp; (obj_initialize.DISPLAY_VRESOLUTION &gt;= 2160){         
                obj_initialize.SETTING_RESOLUTION = 6;
                
                GUIW = 3840;
                GUIH = 2160;        
                display_set_gui_size(GUIW,GUIH);
                window_set_size(3840,2160);
                
                view_wport[0] = 3840;
                view_hport[0] = 2160;
            }
            else {
                obj_initialize.SETTING_RESOLUTION = 0;
                
                GUIW = 960;
                GUIH = 540;        
                display_set_gui_size(GUIW,GUIH);
                window_set_size(960,540);
                
                view_wport[0] = 960;
                view_hport[0] = 540;
            }                                
        }
        
        else if (obj_initialize.SETTING_RESOLUTION == 6){
            obj_initialize.SETTING_RESOLUTION = 7;
            
            GUIW = obj_initialize.DISPLAY_HRESOLUTION;
            GUIH = obj_initialize.DISPLAY_VRESOLUTION;        
            display_set_gui_size(GUIW,GUIH);
            window_set_size(obj_initialize.DISPLAY_HRESOLUTION,obj_initialize.DISPLAY_VRESOLUTION);
            
            view_wport[0] = obj_initialize.DISPLAY_HRESOLUTION;
            view_hport[0] = obj_initialize.DISPLAY_VRESOLUTION;               
        }
        
        else {
            obj_initialize.SETTING_RESOLUTION = 0;
            
            GUIW = 960;
            GUIH = 540;        
            display_set_gui_size(GUIW,GUIH);
            window_set_size(960,540);
            
            view_wport[0] = 960;
            view_hport[0] = 540;                           
        }
    
        //Reset the display after altering the resolution:    
        display_reset(obj_initialize.SETTING_FXAA, obj_initialize.SETTING_VSYNC);                                             
    }   
    
    //Write information to the config:
    scr_cwrite();
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//© 2017 - Reece Warren
//GUI Buttons:

draw_self();

//Set draw settings:
draw_set_font(fnt_Exudation_Large);
draw_set_colour($FFFFFF);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

//Draw button text:

//VSync:
if (BUTTON_TYPE == 0){
    if (obj_initialize.SETTING_VSYNC == true){
        draw_text(x,y,"V-SYNC: ON");
    }
    else {
        draw_text(x,y,"V-SYNC: OFF");
    }
}

//Interpolation:
if (BUTTON_TYPE == 1){
    if (obj_initialize.SETTING_INTERPOLATION == true){
        draw_text(x,y,"Texture Interp: ON");
    }
    else {
        draw_text(x,y,"Texture Interp: OFF");
    }
}

//FXAA:
if (BUTTON_TYPE == 2){
    draw_text(x,y,"FXAA: " + string(obj_initialize.SETTING_FXAA));
}

//Fullscreen:
else if (BUTTON_TYPE == 3){
    if (obj_initialize.SETTING_FULLSCREEN == true){
        draw_text(x,y,"Fullscreen: ON");
    }
    else {
        draw_text(x,y,"Fullscreen: OFF");
    }
}

//Fullscreen:
else if (BUTTON_TYPE == 4){
    if (obj_initialize.SETTING_RESOLUTION == 0){
        draw_text(x,y,"Resolution: 960x540");
    }
    else if (obj_initialize.SETTING_RESOLUTION == 1){
        draw_text(x,y,"Resolution: 1280x720");
    }
    else if (obj_initialize.SETTING_RESOLUTION == 2){
        draw_text(x,y,"Resolution: 1366x768");
    }
    else if (obj_initialize.SETTING_RESOLUTION == 3){
        draw_text(x,y,"Resolution: 1600x900");
    }
    else if (obj_initialize.SETTING_RESOLUTION == 4){
        draw_text(x,y,"Resolution: 1920x1080");
    }
    else if (obj_initialize.SETTING_RESOLUTION == 5){
        draw_text(x,y,"Resolution: 2560x1440");
    }
    else if (obj_initialize.SETTING_RESOLUTION == 6){
        draw_text(x,y,"Resolution: 3840x2160");
    }
    else if (obj_initialize.SETTING_RESOLUTION == 7){
        draw_text(x,y,"Resolution: " + string(obj_initialize.DISPLAY_HRESOLUTION) + "x" + string(obj_initialize.DISPLAY_VRESOLUTION));
    }
}

//Revert draw settings:
draw_set_font(-1);
draw_set_colour(-1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
