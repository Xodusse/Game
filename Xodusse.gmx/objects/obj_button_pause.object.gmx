<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button_small</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-55</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI Buttons:
//© 2017 - Reece Warren

//Button type determines the function of the button:

//0 = Quit,
//1 = Back to game,

//NOTE:
    //Button types for main menu buttons are set in object creation code:

BUTTON_TYPE = 0;
image_speed = 0;

Hover = false;
Clicked = false;

Extender = 96;

//Coordinates:
pH1x = x-(dcos(VIEW_ANGLE)*(Extender));
pH1y = y-(dsin(VIEW_ANGLE)*(Extender));

pH2x = x+(dcos(VIEW_ANGLE)*(Extender));
pH2y = y+(dsin(VIEW_ANGLE)*(Extender));

vDist = 16;

p1x = pH1x - (dcos(VIEW_ANGLE+90)*vDist);
p1y = pH1y - (dsin(VIEW_ANGLE+90)*vDist);

p2x = pH2x - (dcos(VIEW_ANGLE+90)*vDist);
p2y = pH2y - (dsin(VIEW_ANGLE+90)*vDist);

p3x = pH1x + (dcos(VIEW_ANGLE+90)*vDist);
p3y = pH1y + (dsin(VIEW_ANGLE+90)*vDist);

p4x = pH2x + (dcos(VIEW_ANGLE+90)*vDist);
p4y = pH2y + (dsin(VIEW_ANGLE+90)*vDist);   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hover highlighting
// © 2017 - Jon Harvey

/*
    This makes the button hightlight when hovering over and controls mouse clicks.
*/

//Define co-ordinates:
pH1x = x-(dcos(VIEW_ANGLE)*(Extender));
pH1y = y-(dsin(VIEW_ANGLE)*(Extender));

pH2x = x+(dcos(VIEW_ANGLE)*(Extender));
pH2y = y+(dsin(VIEW_ANGLE)*(Extender));

p1x = pH1x - (dcos(VIEW_ANGLE+90)*vDist);
p1y = pH1y - (dsin(VIEW_ANGLE+90)*vDist);

p2x = pH2x - (dcos(VIEW_ANGLE+90)*vDist);
p2y = pH2y - (dsin(VIEW_ANGLE+90)*vDist);

p3x = pH1x + (dcos(VIEW_ANGLE+90)*vDist);
p3y = pH1y + (dsin(VIEW_ANGLE+90)*vDist);

p4x = pH2x + (dcos(VIEW_ANGLE+90)*vDist);
p4y = pH2y + (dsin(VIEW_ANGLE+90)*vDist);   


//Reece - Assigned the hover state to a variable so it can be used to control animations:
Hover = point_in_triangle(mouse_x,mouse_y,p1x,p1y,p2x,p2y,p3x,p3y) || point_in_triangle(mouse_x,mouse_y,p2x,p2y,p3x,p3y,p4x,p4y);

if (Hover == true){
    if (Extender &lt; 128){
        Extender += 8 * FRAME_DELTA;
    }    
    else {
        Extender = 128;
    }
}

else {
    if (Extender &gt; 96){
        Extender -= 16 * FRAME_DELTA;
    }
    else {
        Extender = 96;
    }
}

//Reece - Update pause buttons:

//Back to game:
if (BUTTON_TYPE == 0){    

    x = (view_xview[0]+(view_wview[0]/2));
    y = (view_yview[0]+(view_hview[0]/2));  
    
    if (Hover == true) &amp;&amp; (mouse_check_button_released(mb_left)){
        PAUSED = false;        
    }                 
}

//Quit
else if (BUTTON_TYPE == 1){                     
    
    x = (view_xview[0]+(view_wview[0]/2))-(dcos(VIEW_ANGLE+90)*-64);
    y = (view_yview[0]+(view_hview[0]/2))-(dsin(VIEW_ANGLE+90)*-64);

    if (Hover == true) &amp;&amp; (mouse_check_button_released(mb_left)){ 
        room_goto(rm_main);
        PAUSED = false; 
    }         
}

//Destroy the button if the game is unpaused:
if (PAUSED == false){
    instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//© 2017 - Reece Warren
//GUI Buttons:

draw_set_colour($000000);

//Set draw settings:
draw_set_font(fnt_Exudation_Large); 

//Animate on hover:
if (Hover == true){    
    
    //Extend the button if it is not the full size:
    if !(Extender &gt; 96){
        draw_triangle_colour(p1x,p1y,p2x,p2y,p3x,p3y,$000000,$000000,$000000,false);
        draw_triangle_colour(p2x,p2y,p3x,p3y,p4x,p4y,$000000,$000000,$000000,false);           
        
        draw_set_colour($FFFF00);
    }
    //Otherwise, draw it at a fixed size:
    else {                                  
                              
        draw_triangle_colour(p1x,p1y,p2x,p2y,p3x,p3y,$000000,$000000,$000000,false);
        draw_triangle_colour(p2x,p2y,p3x,p3y,p4x,p4y,$000000,$000000,$000000,false);        
                
        draw_set_colour($FFFF00);
    }    
}

//If not hovered on, draw a standard button:
else {
    draw_triangle_colour(p1x,p1y,p2x,p2y,p3x,p3y,$000000,$000000,$000000,false);
    draw_triangle_colour(p2x,p2y,p3x,p3y,p4x,p4y,$000000,$000000,$000000,false);      
    draw_set_colour($FFFFFF);
}

//Draw the button text draw configuration:
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

//Draw button text:

//Return to game:
if (BUTTON_TYPE == 0){
    draw_text_transformed(x,y,"Return to game.",1,1,VIEW_ANGLE*-1);
}

//Quit:
else if (BUTTON_TYPE == 1){
    draw_text_transformed(x,y,"Main menu.",1,1,VIEW_ANGLE*-1);
}

//Revert draw settings:
draw_set_font(-1);
draw_set_colour(-1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
