<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Â© 2017 - Reece Warren.
//MIT License.

///Display Properties:
//Reference: https://www.youtube.com/watch?v=wv3R2Q536ZU&amp;t=1154s

ideal_width=0;
ideal_height=540;
zoom=1;
max_zoom=1;

//Higher the number, the wider the display, the taller the display, the smaller:
aspect_ratio=display_get_width()/display_get_height();

ideal_width = round(ideal_height*aspect_ratio);
//ideal_height=round(ideal_width / aspect_ratio);

//Pixel Perfect Scaling:
if(display_get_width() % ideal_width != 0){
    var d = round(display_get_width()/ideal_width);
    ideal_width = display_get_width()/d;
}

if(display_get_height() % ideal_height != 0){
    var d = round(display_get_height()/ideal_height);
    ideal_height = display_get_height()/d;
}

//Check for odd number widths:
if (ideal_width &amp; 1){
    ideal_width++;
}
//Check for odd number heights:
if (ideal_height &amp; 1){
    ideal_height++;
}


max_zoom=floor(display_get_width()/ideal_width);

//Enable the views in every single room automatically:
for(var i=1; i&lt;=room_last; i++){
    if(room_exists(i)){
        room_set_view(i,0,true,0,0,ideal_width,ideal_height,0,0,ideal_width,ideal_height,0,0,0,0,-1);
        room_set_view_enabled(i,true);
    }
}

//Resize the surface:
surface_resize(application_surface,ideal_width*2,ideal_height*2);
window_set_size(ideal_width,ideal_height);

room_goto(room_next(room));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center Window:
window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
