<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory variables
// © 2017 - Jon Harvey

globalvar Idoubles,Isingles,Igrenades,Iammo;
Idoubles = 2;//Number of two-handed weapons.
Isingles = 2;//Number of one-handed weapons.
Igrenades = 1;
Iammo = Idoubles+Isingles;//Number of ammo (magazines or rounds).

globalvar Ienable,Ibackpack,Iid,Iquantity,Iposition,Iweight,Istrength,W,I,Q;
//Toggle inventory (0 is off, 1 is on).
Ienable = 0;
//Control backpack (0 is off, 1 is small, 2 is large).
Ibackpack = 0;
//Inventory id of item being moved (0 for no item).
Iid = 0;
Iquantity = 0;
Iposition = 0;

//Weight and strength (max weight) in kg used in inventory.
Iweight = 0;
Istrength = 50;

//Weight[id], weight of items in kg.
W[Idoubles*2+Isingles+Igrenades+Iammo+2] = 0;
//Guns
W[0] = 1.2;
W[1] = 1.5;
W[2] = 1.7;
W[3] = 1.5;
W[4] = 1.5;
W[5] = 1.2;
//Grenade
W[6] = 1.2;
//Ammo
W[7] = 1.2;
W[8] = 1.2;
W[9] = 1.2;
W[10] = 1.2;

//Item[pos] and quantity[pos] arrays (ordered from left to right, bottom to top).
I[23] = 0;
Q[23] = 0;

//Add default items (ids correspond to spr_items image index+1).
I[0] = 1;
Q[0] = 0;
I[1] = 2;
Q[1] = Gcap[0];
I[2] = 3;
Q[2] = 0;
I[3] = 4;
Q[3] = Gcap[1];
I[4] = 5;
Q[4] = Gcap[2];
I[5] = 6;
Q[5] = Gcap[3];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control inventory
// © 2017 - Jon Harvey

//Pop up on key press.
if Kinventory{
    
    Ienable = !Ienable;
}

//Inventory item movement
if Ienable{
    
    var S;
    S = 64;
    
    var X,Y;
    X = floor((window_mouse_get_x()-GUIW/2-S*3)/S);
    Y = 1-floor((window_mouse_get_y()-GUIH/2)/S);
    
    //Select item from inventory for moving.
    if mouse_check_button_pressed(mb_left){
        
        //Select backpack.
        if (X == 2) &amp;&amp; (Y == 1){
            
            Iid = Idoubles*2+Isingles+Igrenades+Iammo+Ibackpack;
            Iquantity = 0;
            
            //Empty slot.
            Ibackpack = 0;
        }
        else
        if (X&gt;=-6 &amp;&amp; X&lt;0) &amp;&amp; (Y&gt;0 &amp;&amp; Y&lt;=2+Ibackpack){
            
            //Get item details.
            Iid = I[X+Y*6];
            Iquantity = Q[X+Y*6];
            Iposition = X+Y*6;
            
            if Iid&lt;=Idoubles*2{
                
                var S = (Iid&amp;1)*2-1;
                Iquantity = Q[X+Y*6+(Iid&amp;1)];
                I[X+Y*6+S] = 0;
                Q[X+Y*6+S] = 0;
            }
            //Empty slots.
            I[X+Y*6] = 0;
            Q[X+Y*6] = 0;
        }
    }
    else
    //Release item and move it.
    if mouse_check_button_released(mb_left) &amp;&amp; Iid{
        
        if (X&gt;=-6 &amp;&amp; X&lt;0) &amp;&amp; (Y&gt;0 &amp;&amp; Y&lt;=2+Ibackpack) &amp;&amp; (X&gt;=-6 &amp;&amp; X&lt;0){
                
            scr_inventory_swap(X+Y*6,Iposition,Iid,Iquantity);            
        }
        else{
            //Reece - Added extra required arguments to script:
            scr_inventory_drop(Iid,Iquantity,mouse_x,mouse_y,0,0);
        }
        
        Iid = 0;
        Iquantity = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
