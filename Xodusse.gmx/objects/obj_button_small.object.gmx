<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button_small</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-55</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI Buttons:
//© 2017 - Reece Warren

//Button type determines the function of the button:

//0 = Vsync,
//1 = Interpolation,
//2 = FXAA,
//3 = Fullscreen,
//4 = Resolution,
//5 = Surface Scale,
//6 = Control Mode,
//7 = Gamepad Toggle,

//NOTE:
    //Button types for main menu buttons are set in object creation code:

BUTTON_TYPE = 0;
image_speed = 0;

Hover = false;
Clicked = false;

Extender = 96;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hover highlighting
// © 2017 - Jon Harvey

/*
    This makes the button hightlight when hovering over and controls mouse clicks.
*/

//Reece - Assigned the hover state to a variable so it can be used to control animations:
var Resolution,Hover;
Resolution = obj_initialize.SETTING_RESOLUTION;
Hover = point_in_rectangle(mouse_x,mouse_y,x-96,y-16,x+96,y+16);

if (Hover == true){
    if !(Extender &gt; 128){
        Extender += 8 * FRAME_DELTA;
    }
    
    //Trigger the cursor:
    obj_controller_cursor.CURSOR_TARGETING = 1;
    
}

else {
    if (Extender &gt; 96){
        Extender -= 16 * FRAME_DELTA;
    }
    else {
        Extender = 96;
    }
}
    
//Detect mouse press - Reece:
if (Hover == true) &amp;&amp; (mouse_check_button_released(mb_left)){
    ///GUI Button functions:
    //© 2017 - Reece Warren
    ///GUI Button functions:
    //© 2017 - Reece Warren
    
    //VSYNC:
    if (BUTTON_TYPE == 0){
        //Only allow the user to disable Vsync if not in fullscreen:
        if (obj_initialize.SETTING_FULLSCREEN == false){
            obj_initialize.SETTING_VSYNC = !obj_initialize.SETTING_VSYNC;
            
            display_set_gui_size(GUIW,GUIH);              
            window_set_size(GUIW,GUIH); 
                       
            view_wport[0] = GUIW;
            view_hport[0] = GUIH; 
            
            display_reset(obj_initialize.SETTING_FXAA, obj_initialize.SETTING_VSYNC);
            obj_initialize.SETTING_INTERPOLATION = false;
        }
    }
    
    //Interpolation:
    else if (BUTTON_TYPE == 1){
        obj_initialize.SETTING_INTERPOLATION = !obj_initialize.SETTING_INTERPOLATION;
        texture_set_interpolation(obj_initialize.SETTING_INTERPOLATION);
    }
    
    //FXAA:
    else if (BUTTON_TYPE == 2){
        //Only allow FXAA to be modified if VSYNC is true:
        if (obj_initialize.SETTING_VSYNC = true){
                
            //0 to 2:
            if (obj_initialize.SETTING_FXAA == 0) &amp;&amp; (obj_initialize.SETTING_FXAA_MAX &gt; 0) &amp;&amp; (obj_initialize.SETTING_FXAA_MAX != 12){
                obj_initialize.SETTING_FXAA = 2;
            }
            //0 to 4:
            else if (obj_initialize.SETTING_FXAA == 0) &amp;&amp; (obj_initialize.SETTING_FXAA_MAX &gt; 0){
                obj_initialize.SETTING_FXAA = 4;
            }
            //2 to 4:
            else if (obj_initialize.SETTING_FXAA == 2) &amp;&amp; (obj_initialize.SETTING_FXAA_MAX &gt;= 6){
                obj_initialize.SETTING_FXAA = 4;
            }
            //4 to 8:
            else if (obj_initialize.SETTING_FXAA == 4) &amp;&amp; (obj_initialize.SETTING_FXAA_MAX &gt;= 12){
                obj_initialize.SETTING_FXAA = 8;
            }
            //2 to 4:
            else if (obj_initialize.SETTING_FXAA == 4) &amp;&amp; (obj_initialize.SETTING_FXAA_MAX == 14){
                obj_initialize.SETTING_FXAA = 8;
            }
            else {
                obj_initialize.SETTING_FXAA = 0;
            }
            //Prevents surface bugs in fullscreen:            
            obj_initialize.SETTING_VSYNC = true;
            
            display_set_gui_size(GUIW,GUIH);              
            window_set_size(GUIW,GUIH); 
                       
            view_wport[0] = GUIW;
            view_hport[0] = GUIH; 
            
            display_reset(obj_initialize.SETTING_FXAA, obj_initialize.SETTING_VSYNC);
            obj_initialize.SETTING_INTERPOLATION = false;
        }                  
    }
    
    //Fullscreen
    else if (BUTTON_TYPE == 3){
        //Prevent the user from using fullscreen if FXAA is not enabled (Buggy):
        //if (obj_initialize.SETTING_FXAA != 0) || (obj_initialize.SETTING_FULLSCREEN == true){
            obj_initialize.SETTING_FULLSCREEN = !obj_initialize.SETTING_FULLSCREEN;
            window_set_fullscreen(obj_initialize.SETTING_FULLSCREEN);
            
            //If now fullscreen:
            if (obj_initialize.SETTING_FULLSCREEN){
            
                //ENABLE FULLSCREEN RESOLUTION MODE:
                GUIW = obj_initialize.DISPLAY_HRESOLUTION;
                GUIH = obj_initialize.DISPLAY_VRESOLUTION;
                obj_initialize.SETTING_RESOLUTION = 7;                            
                
                //Enables vsync automatically when toggling fullscreen to prevent the surface not drawing:
                obj_initialize.SETTING_VSYNC = true; 
            }
            
            //If now windowed:
            else{
                
                //Set window width:
                GUIW = 960;
                GUIH = 540;
                obj_initialize.SETTING_RESOLUTION = 0;                                                
            }
            
            //Reset the display after altering fullscreen mode:    
            display_reset(obj_initialize.SETTING_FXAA, obj_initialize.SETTING_VSYNC);
            obj_initialize.SETTING_INTERPOLATION = false;
        //}                              
    }
    
    //Toggle Resolution (only if not in fullscreen mode):
    else if (BUTTON_TYPE == 4) &amp;&amp; (obj_initialize.SETTING_RESOLUTION != 7) {
        
        //Simplified code - Jon
        obj_initialize.SETTING_RESOLUTION += 1;
                
        switch(obj_initialize.SETTING_RESOLUTION)
        {
            default:
            obj_initialize.SETTING_RESOLUTION = 0;
            GUIW = 960;
            GUIH = 540;
            break;
            
            case 1:
            GUIW = 1280;
            GUIH = 720;
            break;
            
            case 2:
            GUIW = 1366;
            GUIH = 768;
            break;
            
            case 3:
            GUIW = 1600;
            GUIH = 900;
            break;
            
            case 4:
            GUIW = 1920;
            GUIH = 1080;
            break;
            
            case 5:
            GUIW = 2560;
            GUIH = 1440;
            break;
            
            case 6:
            GUIW = 3840;
            GUIH = 2160;
            break;
            
            case 7:
            GUIW = obj_initialize.DISPLAY_HRESOLUTION;
            GUIH = obj_initialize.DISPLAY_VRESOLUTION;
            break;
        }
    }
    
    //SURFACE SCALE:
    if (BUTTON_TYPE == 5){
        //Only allow the user to disable Vsync if not in fullscreen:
        if (obj_initialize.SETTING_SURFACE_SCALE == 0.5){
            obj_initialize.SETTING_SURFACE_SCALE = 1;
        }        
        
        else if (obj_initialize.SETTING_SURFACE_SCALE == 1){
            obj_initialize.SETTING_SURFACE_SCALE = 2;
        }
        
        else if (obj_initialize.SETTING_SURFACE_SCALE == 2){
            obj_initialize.SETTING_SURFACE_SCALE = 0.5;
        }
    } 
    
    //CONTROL MODE:
    if (BUTTON_TYPE == 6){
        //Toggle the control mode:
        obj_initialize.SETTING_CONTROL_MODE = !obj_initialize.SETTING_CONTROL_MODE;
    }
    
    //GAMEPAD TOGGLE:
    if (BUTTON_TYPE == 7){
        //Toggle the gamepad:
        obj_initialize.SETTING_GAMEPAD_ENABLED = !obj_initialize.SETTING_GAMEPAD_ENABLED;
    }  
    
    //Write information to the config:
    scr_cwrite();

    //Update display
    if (obj_initialize.DISPLAY_HRESOLUTION &lt; GUIW) || (obj_initialize.DISPLAY_VRESOLUTION &lt; GUIH){
    
        obj_initialize.SETTING_RESOLUTION = 0;
        GUIW = 960;
        GUIH = 540;
        
        if (obj_initialize.DISPLAY_HRESOLUTION &lt; GUIW) || (obj_initialize.DISPLAY_VRESOLUTION &lt; GUIH){
            
            obj_initialize.SETTING_RESOLUTION = 7;
            GUIW = DISPLAY_HRESOLUTION;
            GUIH = DISPLAY_VRESOLUTION;
        }
    }
    
    var Scale;
    Scale = obj_initialize.SETTING_SURFACE_SCALE;
    
    display_set_gui_size(GUIW,GUIH);
    window_set_size(GUIW,GUIH);
                
    view_wport[0] = GUIW;
    view_hport[0] = GUIH;
    
    with(obj_controller_cursor){
        event_user(0);
    }
    
    obj_init_display.alarm[0] = 1;
    surface_resize(application_surface,GUIW*Scale,GUIH*Scale);
        
    //Reset the display after altering the resolution:    
    display_reset(obj_initialize.SETTING_FXAA, obj_initialize.SETTING_VSYNC);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//© 2017 - Reece Warren
//GUI Buttons:

//draw_self();

draw_set_colour($000000);

//Set draw settings:
draw_set_font(fnt_Exudation_Large);

//Animate on hover:
if (Hover == true){
    //Extend the button if it is not the full size:
    if !(Extender &gt; 96){
        draw_rectangle_colour(x-Extender,y-16,x+Extender,y+16,$000000,$000000,$000000,$000000,false);
        //Right Triangle
        draw_triangle_colour(x+Extender,y-16-1,x+Extender,y+16,x+Extender+16,y-16-1,$F6D22A,$F6D22A,$F6D22A,false);
        draw_triangle_colour(x+Extender,y-16-1,x+Extender-16,y+16,x+Extender,y+16,$F6D22A,$F6D22A,$F6D22A,false);
        //Left Triangle
        draw_triangle_colour(x-Extender,y-16-1,x-Extender,y+16,x-Extender-16,y-16-1,$F6D22A,$F6D22A,$F6D22A,false);
        draw_triangle_colour(x-Extender,y-16-1,x-Extender+16,y+16,x-Extender,y+16,$F6D22A,$F6D22A,$F6D22A,false);        
        
        draw_set_colour($FFFF00);
    }
    //Otherwise, draw it at a fixed size:
    else {
        draw_rectangle_colour(x-128,y-16,x+Extender,y+16,$000000,$000000,$000000,$000000,false);
        //Right Triangle
        draw_triangle_colour(x+Extender,y-16-1,x+Extender,y+16,x+Extender+16,y-16-1,$F6D22A,$F6D22A,$F6D22A,false);
        draw_triangle_colour(x+Extender,y-16-1,x+Extender-16,y+16,x+Extender,y+16,$F6D22A,$F6D22A,$F6D22A,false);
        //Left Triangle
        draw_triangle_colour(x-Extender,y-16-1,x-Extender,y+16,x-Extender-16,y-16-1,$F6D22A,$F6D22A,$F6D22A,false);
        draw_triangle_colour(x-Extender,y-16-1,x-Extender+16,y+16,x-Extender,y+16,$F6D22A,$F6D22A,$F6D22A,false);
                
        draw_set_colour($FFFF00);
    }    
}

//If not hovered on, draw a standard button:
else {
    draw_rectangle(x-Extender,y-16,x+Extender,y+16,false);
    draw_triangle(x+Extender,y-16-1,x+Extender,y+16,x+Extender+16,y-16-1,false);
    draw_triangle(x-Extender-1,y-16-1,x-Extender-1,y+16,x-Extender-16-1,y-16-1,false);
    draw_set_colour($FFFFFF);
}

//Draw the button text draw configuration:
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

//Draw button text:

//Vsync:
if (BUTTON_TYPE == 0){
    if (obj_initialize.SETTING_VSYNC == true){
        draw_text(x,y,"V-SYNC: ON");
    }
    else {
        draw_text(x,y,"V-SYNC: OFF");
    }
}

//Interpolation:
else if (BUTTON_TYPE == 1){
    if (obj_initialize.SETTING_INTERPOLATION == true){
        draw_text(x,y,"Texture Interp: ON");
    }
    else {
        draw_text(x,y,"Texture Interp: OFF");
    }
}

//FXAA:
else if (BUTTON_TYPE == 2){
    draw_text(x,y,"FXAA: " + string(obj_initialize.SETTING_FXAA));
}

//Fullscreen mode:
else if (BUTTON_TYPE == 3){
    if (obj_initialize.SETTING_FULLSCREEN == true){
        draw_text(x,y,"Fullscreen: ON");
    }
    else {
        draw_text(x,y,"Fullscreen: OFF");
    }
}

//Resolution:
else if (BUTTON_TYPE == 4){
    if (obj_initialize.SETTING_RESOLUTION == 0){
        draw_text(x,y,"Resolution: 960x540");
    }
    else if (obj_initialize.SETTING_RESOLUTION == 1){
        draw_text(x,y,"Resolution: 1280x720");
    }
    else if (obj_initialize.SETTING_RESOLUTION == 2){
        draw_text(x,y,"Resolution: 1366x768");
    }
    else if (obj_initialize.SETTING_RESOLUTION == 3){
        draw_text(x,y,"Resolution: 1600x900");
    }
    else if (obj_initialize.SETTING_RESOLUTION == 4){
        draw_text(x,y,"Resolution: 1920x1080");
    }
    else if (obj_initialize.SETTING_RESOLUTION == 5){
        draw_text(x,y,"Resolution: 2560x1440");
    }
    else if (obj_initialize.SETTING_RESOLUTION == 6){
        draw_text(x,y,"Resolution: 3840x2160");
    }
    else if (obj_initialize.SETTING_RESOLUTION == 7){
        draw_text(x,y,"Resolution: " + string(obj_initialize.DISPLAY_HRESOLUTION) + "x" + string(obj_initialize.DISPLAY_VRESOLUTION));
    }
}

//Surface Scale:
else if (BUTTON_TYPE == 5){
    draw_text(x,y,"Surface Scale: " + string(obj_initialize.SETTING_SURFACE_SCALE) + "x");
}

//Surface Scale:
else if (BUTTON_TYPE == 6){
    if (obj_initialize.SETTING_CONTROL_MODE == 0){
        draw_text(x,y,"Rotation Control: Q&amp;E");
    }
    else {
        draw_text(x,y,"Rotation Control: Mouse");
    }
}

//Gamepad Toggle:
else if (BUTTON_TYPE == 7){
    if (obj_initialize.SETTING_GAMEPAD_ENABLED == 0){
        draw_text(x,y,"Controller: Disabled");
    }
    else {
        draw_text(x,y,"Controller: Enabled");
    }
}

//Revert draw settings:
draw_set_font(-1);
draw_set_colour(-1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
