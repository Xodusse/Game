<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse cursor variables:
//© 2017 - Reece Warren.

Cursor_Frame = 0;
Cursor_Counter = 1;
Cursor_Sprite = spr_Cursor_Free;
Cursor_Angle = 0;
Cursor_Zoom = true;
Cursor_Scale = 1;

CURSOR_TARGETING = false;

Screen_Centre_X = GUIW/2;
Screen_Centre_Y = GUIH/2;

Mouse_X_Room = mouse_x;
Mouse_Y_Room = mouse_y;

dist = 0;
dir = 0;

Mouse_X_True = 0;
Mouse_Y_True = 0;

//Used to determine the distance from the centre of the screen (according to screen resolution);
resolution_scaling_factor = GUIW / view_wview[view_current];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cursor Targeting:
//© 2017 - Reece warren

if (CURSOR_TARGETING){
    Cursor_Counter -= FRAME_DELTA_OVERRIDE;
    if (Cursor_Counter &lt;= 0){
        Cursor_Sprite = spr_Cursor_Target;
        Cursor_Counter = 1;    
        Cursor_Frame = ((Cursor_Frame + 1) % 8);
        if (Cursor_Zoom == true){
            Cursor_Scale = Cursor_Scale + 0.1;
            if (Cursor_Scale &gt;= 1.5){
                Cursor_Zoom = false;
            }
        }
        else {
            Cursor_Scale = Cursor_Scale - 0.1;
            if (Cursor_Scale &lt;= 1){
                Cursor_Zoom = true;
            }            
        }
    }
    Cursor_Angle = ((Cursor_Angle - (6 * FRAME_DELTA_OVERRIDE)) % 360);
}

else {
    Cursor_Sprite = spr_Cursor_Free;
    Cursor_Frame = 0;
    Cursor_Angle = 0;
    Cursor_Scale = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update the cursor location:
//© 2017 - Reece warren

/*Update the mouse position for drawing on the GUI:
*/
//Get the centre of the screen for mouse location calculation:
Screen_Centre_X = view_xview[view_current]+(view_wview[view_current]/2);
Screen_Centre_Y = view_yview[view_current]+(view_hview[view_current]/2);

//Get the position of the mouse in the room for location calculation:
Mouse_X_Room = mouse_x;
Mouse_Y_Room = mouse_y;

//Calculate the distance between the two points:
dist = point_distance(Screen_Centre_X,Screen_Centre_Y,Mouse_X_Room,Mouse_Y_Room) * resolution_scaling_factor;
dir = point_direction(Screen_Centre_X,Screen_Centre_Y,Mouse_X_Room,Mouse_Y_Room) + VIEW_ANGLE;

//Calculate the final mouse position (relative to draw GUI):
Mouse_X_True = GUIW/2 + (((dcos(dir) * dist)));
Mouse_Y_True = GUIH/2 - (((dsin(dir) * dist)));

/* - CONTROLLER CODE - BROKEN:

//Calculate the final mouse position (relative to draw GUI):
/*if (obj_initialize.SETTING_GAMEPAD_ENABLED) &amp;&amp; !PAUSED {

    //Get the position of the mouse in the room for location calculation:
    Cursor_X_Room = Screen_Centre_X+(dcos(VIEW_ANGLE)*256);
    Cursor_Y_Room = Screen_Centre_Y+(dsin(VIEW_ANGLE)*256);
    
    //Calculate the distance between the two points:
    dist = point_distance(Screen_Centre_X,Screen_Centre_Y,Cursor_X_Room,Cursor_Y_Room) * resolution_scaling_factor;
    dir = point_direction(Screen_Centre_X,Screen_Centre_Y,Cursor_X_Room,Cursor_Y_Room) + VIEW_ANGLE;

    Mouse_X_True = Screen_Centre_X + (((dcos(dir) * dist)));
    Mouse_Y_True = Screen_Centre_Y - (((dsin(dir) * dist)));
}

//Using mouse:
else {
    //Get the position of the mouse in the room for location calculation:
    Mouse_X_Room = mouse_x;
    Mouse_Y_Room = mouse_y;
    
    //Calculate the distance between the two points:
    dist = point_distance(Screen_Centre_X,Screen_Centre_Y,Mouse_X_Room,Mouse_Y_Room) * resolution_scaling_factor;
    dir = point_direction(Screen_Centre_X,Screen_Centre_Y,Mouse_X_Room,Mouse_Y_Room) + VIEW_ANGLE;

    Mouse_X_True = Screen_Centre_X + (((dcos(dir) * dist)));
    Mouse_Y_True = Screen_Centre_Y - (((dsin(dir) * dist)));
}*/


CURSOR_TARGETING = 0;

//Trigger cursor:
if instance_exists(obj_enemy){
    if (position_meeting(mouse_x,mouse_y,obj_enemy)){
        CURSOR_TARGETING = 1;
    }
}

//Otherwise draw a regular cursor:
/*else {
    Cursor_Sprite = spr_Cursor_Free;
    Cursor_Frame = 0;
    Cursor_Angle = 0;
    Cursor_Scale = 1;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine the resolution scaling factor:
//© 2017 - Reece Warren;

//This event is triggered when toggling the resolution using
//obj_button_small step in game:

//Used to determine the distance from the centre of the screen (according to screen resolution);
resolution_scaling_factor = GUIW / view_wview[view_current]; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine the resolution scaling factor:
//© 2017 - Reece Warren;

//Used to determine the distance from the centre of the screen (according to screen resolution);
resolution_scaling_factor = GUIW / view_wview[view_current]; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the cursor:
//© 2017 - Reece Warren:

//draw_sprite(Cursor_Sprite,Cursor_Frame,Mouse_X_True,Mouse_Y_True);
if (PAUSED){
    draw_sprite_ext(Cursor_Sprite,Cursor_Frame,Mouse_X_True,Mouse_Y_True,Cursor_Scale,Cursor_Scale,Cursor_Angle,-1,1);
}
else if(room != rm_game_0){
    draw_sprite_ext(Cursor_Sprite,Cursor_Frame,Mouse_X_True,Mouse_Y_True,Cursor_Scale,Cursor_Scale,Cursor_Angle,-1,1);
}
else if !(obj_initialize.SETTING_GAMEPAD_ENABLED){
    //draw_sprite_ext(Cursor_Sprite,Cursor_Frame,Mouse_X_True,Mouse_Y_True,Cursor_Scale,Cursor_Scale,Cursor_Angle,-1,1);
    draw_sprite_ext(Cursor_Sprite,Cursor_Frame,window_mouse_get_x(),window_mouse_get_y(),Cursor_Scale,Cursor_Scale,Cursor_Angle,-1,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
