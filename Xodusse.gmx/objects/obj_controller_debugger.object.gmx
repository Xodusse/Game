<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//© 2017 - Reece Warren, All rights reserved.
//Debug screen object.

player_x = 0;
player_y = 0;
player_dir = 0;
player_speed = 0;

FPS_Counter = 0.5;
FPS = floor(fps_real);

memory_v = -1;
memory_p = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//© 2017 - Reece Warren, All rights reserved.
//Debugger visibility.

//CHECK IF DEBUGGER IS TOGGLED:
if (Kdebug){
    DEBUG_VISIBLE = !DEBUG_VISIBLE;
}

//UPDATE PLAYER X/Y:
if (instance_exists(obj_player)){

    player_x = round(obj_player.x);
    player_y = round(obj_player.y);
    
    player_dir = round(darctan2(-obj_player.SpeedY,obj_player.SpeedX)+360) % 360;
    //Added player speed variable - Jon.

    player_speed = round(sqrt(sqr(obj_player.SpeedX)+sqr(obj_player.SpeedY)));
}
//Get the current game memory usage in Kilobytes:
memory_v = ((scr_get_memory_virtual()/8)/1024);    
memory_p = ((scr_get_memory_physical()/8)/1024); 

//UPDATE VIEW ROTATION VARIABLE:
view_a =(round(view_angle[0])+360) mod 360;

//UPDATE FPS COUNTER:
FPS_Counter -= (1/60) * FRAME_DELTA;
if (FPS_Counter &lt;= 0){
    FPS_Counter = 0.5;
    FPS = floor(fps);
    dF = FRAME_DELTA;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//© 2017 - Reece Warren, All rights reserved.
//Draw debug screen.

if (DEBUG_VISIBLE == true){

    draw_set_colour(c_white);
    
    draw_set_font(FNT_EXUDATION_LARGE);

    
    // -- LEFT --
    
    //Version number:
    draw_text(8, 10,
        "Xodusse V.139");
    
    //Copyright:
    draw_text(8, 35,
        "© 2017 - Reece Warren, Jon Harvey. MIT License.");
        
    //X &amp; Y &amp; R:
    draw_text(8, 85,
        "X = " + string(player_x) + "  Y = " + string(player_y) + "  R = " + string(view_a));
        
    //Speed and Direction:
    draw_text(8, 110,
        "P_Dir = " + string(player_dir) + " P_Speed = " + string(player_speed));
    
    // -- RIGHT --    
            
    draw_set_halign(fa_right);
    
    //FPS:
    draw_text(GUIW - 8, 10,
        "FPS = " + string(FPS) + " dF = " + string(dF));
        
    //Virtual Memory:
    draw_text(GUIW - 8, 35,
        "Memory_Vir = " + string(memory_v) + "kB");
        
    //Physical Memory:
    draw_text(GUIW - 8, 60,
         "Memory_Phy = " + string(memory_p) + "kB");
         
    //Current alien count:
    draw_text(GUIW - 8, 110,
         "AlienCountCurrent: " + string(AlienCountCurrent)); 
         
    //Current alien max:
    draw_text(GUIW - 8, 135,
         "AlienMax: " + string(AlienMax));
         
    //Current aliens remaining:
    draw_text(GUIW - 8, 160,
         "AlienCountRemaining: " + string(AlienCountRemaining));
         
    /*Draw the keyboard key:
    draw_text(view_wview[0] - 8, 160,
         string(keyboard_key));*/
         
    //Wave:
    draw_text(GUIW - 8, 210,
         "Wave: " + string(Wave));
         
    //Wave:
    draw_text(GUIW - 8, 235,
         "Surface Scale: " + string(obj_initialize.SETTING_SURFACE_SCALE) + "x");           
         
    // -- RESET --
    draw_set_halign(fa_left);
        
    draw_set_colour(c_black); 
    
    draw_set_font(-1);
    
}
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
