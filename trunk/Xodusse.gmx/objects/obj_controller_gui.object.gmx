<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-32768</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screenshake variables
// © 2017 - Jon Harvey

globalvar Shake;
Shake = 0;
ShakeX = 0;
ShakeY = 0;
ShakeAngle = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Message variables
// © 2017 - Jon Harvey

globalvar Message,MessageFade;
Message = "";
MessageFade = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///View and screenshake controller
// © 2017 - Jon Harvey

Shake = Shake*S90;
ShakeX = ShakeX*(1-S90)+S90*50*Shake*(random(2)-1);
ShakeY = ShakeY*(1-S90)+S90*50*Shake*(random(2)-1);
ShakeAngle = ShakeAngle*(1-S90)+S90*20*Shake*(random(2)-1);

if instance_exists(obj_player){
    
    //Smoothly translate and rotate view with the player.
    view_xview[0] = view_xview[0]*S90+(1-S90)*(obj_player.x-view_wview[0]/2+ShakeX);
    view_yview[0] = view_yview[0]*S90+(1-S90)*(obj_player.y-view_hview[0]/2+ShakeY);
    view_angle[0] = view_angle[0]*S98+(1-S98)*(90-obj_player.WalkDirection+ShakeAngle);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update message
// © 2017 - Jon Harvey

MessageFade *= S98;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw gun info
// © 2017 - Jon Harvey

//Variables for view port width and height.
var W,H,S;
W = view_wport[0];
H = view_hport[0];
S = 64;

if instance_exists(obj_player){

    draw_set_font(FNT_EXUDATION);
    
    //Show message
    draw_set_colour($FFFFFF);
    draw_set_alpha(2*MessageFade);
    draw_text(8,H-180-60*(1-MessageFade),Message);
    draw_set_alpha(1);

    with(obj_player){
    
        //Inner circle.
        draw_set_alpha(0.6);
        draw_circle_colour(0,H,60,$222222,$333333,0);
        draw_set_alpha(1);
        
        //Outer reload circle.
        draw_primitive_begin(pr_trianglestrip);
        for(var i = 0;i&lt;=30;i++){
            
            var Angle = i*3*min(Reload/Greload[G[Current]],1);
            draw_vertex_colour(dcos(Angle)*150,H-dsin(Angle)*150,$444499,0.6);
            draw_vertex_colour(dcos(Angle)*60,H-dsin(Angle)*60,$333333,0.6);
        }
        draw_primitive_end();
        
        if Count{
            //Info text such as number of shots and number of magazines.
            draw_set_colour($FFFFFF);
            draw_text(2,H-40,string(max(Magazines,0)));
            draw_text(4,H-24,string(Q[P[Current]])+"/"+string(Gcap[G[Current]]));
            draw_set_colour(0);
            
            if  Current == Secondary{
                
                //Center gun on outer circle.
                var Item,Angle,Alpha;
                Item = I[P[Current]];
                Angle = 30*Swap-45;
                Alpha = 1;
                draw_sprite_ext(spr_items,Item-1,dcos(Angle)*120,H+dsin(Angle)*120,50/S,50/S,-Angle,-1,1);
                if (Item&lt;=Idoubles*2){
                    
                    draw_sprite_ext(spr_items,Item-2,dcos(Angle)*70,H+dsin(Angle)*70,50/S,50/S,-Angle,-1,1);
                }
                
                //Top gun on outer circle.
                Item = I[P[(Current+1)%Count]];
                Angle = 30*Swap-75;
                Alpha = 0.5+Swap;
                draw_sprite_ext(spr_items,Item-1,dcos(Angle)*120,H+dsin(Angle)*120,40/S,40/S,-Angle,-1,Alpha);
                if (Item&lt;=Idoubles*2){
                    
                    draw_sprite_ext(spr_items,Item-2,dcos(Angle)*80,H+dsin(Angle)*80,40/S,40/S,-Angle,-1,Alpha);
                }
                
                //Bottom gun on outer circle.
                Item = I[P[(Current-1+Count)%Count]];
                Angle = 30*Swap-15;
                Alpha = 0.5-Swap;
                draw_sprite_ext(spr_items,Item-1,dcos(Angle)*120,H+dsin(Angle)*120,40/S,40/S,-Angle,-1,Alpha);
                if (Item&lt;=Idoubles*2){
                    
                    draw_sprite_ext(spr_items,Item-2,dcos(Angle)*80,H+dsin(Angle)*80,40/S,40/S,-Angle,-1,Alpha);
                }
            }
            else{
            
                //Center gun on outer circle.
                var Item,Angle,Alpha;
                Item = I[P[Current]];
                Angle = 30*Swap-45;
                Alpha = 1;
                draw_sprite_ext(spr_items,Item-1,dcos(Angle)*120,H+dsin(Angle)*120,50/S,50/S,-Angle,-1,1);
                
                Item = I[P[Secondary]];
                Angle = -45;
                draw_sprite_ext(spr_items,Item-1,dcos(Angle)*70,H+dsin(Angle)*70,50/S,50/S,-Angle,-1,1);
                
                //Top gun on outer circle.
                Item = I[P[(Current+1)%Count]];
                Angle = 30*Swap-75;
                Alpha = 0.5+Swap;
                draw_sprite_ext(spr_items,Item-1,dcos(Angle)*120,H+dsin(Angle)*120,40/S,40/S,-Angle,-1,Alpha);
                
                //Bottom gun on outer circle.
                Item = I[P[(Current-1+Count)%Count]];
                Angle = 30*Swap-15;
                Alpha = 0.5-Swap;
                draw_sprite_ext(spr_items,Item-1,dcos(Angle)*120,H+dsin(Angle)*120,40/S,40/S,-Angle,-1,Alpha);
            }
        }

        //Health bar.
        draw_rectangle(W-100,H-40,W-20,H-20,1);        
        draw_rectangle(W-100,H-40,W-100+clamp(Health,0,10)*8,H-20,0);
    }
    
    //Inventory system.
    if Ienable{
          
        draw_set_alpha(0.4);
        //Inventory base.
        draw_rectangle(W/2-S*3.5,H/2-S*1.5-S*Ibackpack,W/2+S*3.5,H/2+S*1.5,0);
        
        //Backpack slot.
        draw_rectangle(W/2+S*4.5,H/2-S*0.5,W/2+S*6.5,H/2+S*1.5,0);
        draw_set_alpha(1);
        draw_rectangle(W/2+S*5,H/2,W/2+S*6,H/2+S,1);
        if Ibackpack{
        
            draw_sprite(spr_items,Idoubles*2+Isingles+Iammo+Ibackpack-1,W/2+S*5.5,H/2+S*.5);
        }
        
        //Cycle through inventory items.
        draw_set_halign(fa_right);
        draw_set_valign(fa_bottom);
        for(var Y = 0;Y&lt;2+Ibackpack;Y++)
        for(var X = 0;X&lt;6;X++){
            
            var Item = I[X+Y*6];
            var Quantity = Q[X+Y*6];
            
            //Slot square.
            draw_set_colour(0);
            draw_rectangle(W/2-S*3+1+X*S,H/2+1-Y*S,W/2-S*2-1+X*S,H/2+S-1-Y*S,1);
            
            if Item{
                
                //Item sprite.
                draw_sprite(spr_items,Item-1,W/2-S*2.5+X*S,H/2+S/2-Y*S);
                
                //Item quantity.
                if Quantity{
                    
                    draw_set_colour($FFFFFF);
                    draw_text(W/2-S*2-2+X*S,H/2+S-Y*S,Quantity);
                }
            }
        }
        
        //Item being moved.
        if Iid{
        
            var X,Y;
            X = window_mouse_get_x();
            Y = window_mouse_get_y();
            
            //Item sprite.
            draw_sprite(spr_items,Iid-1,X,Y);
            //Item's second part if it's a double.
            if Iid&lt;=Idoubles*2{
            
                draw_sprite(spr_items,Iid-2+2*(Iid%2),X-S+S*2*(Iid%2),Y);
            }
            //Item quantity.
            if Iquantity{
            
                draw_set_colour($FFFFFF);
                draw_text(X+S/2-2+S*(Iid&amp;1)*(Iid&lt;=Idoubles*2),Y+S/2,Iquantity);
            }
        }
        
        draw_set_colour(0);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
    }
    draw_set_font(-1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
