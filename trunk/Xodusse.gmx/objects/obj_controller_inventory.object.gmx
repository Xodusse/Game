<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory variables
// © 2017 - Jon Harvey

globalvar Ienable,Ibackpack,Iid,Iquantity,Iposition,I,Q;
//Toggle inventory (0 is off, 1 is on).
Ienable = 0;

//Control backpack (0 is off, 1 is small, 2 is large).
Ibackpack = 0;

//Inventory id of item being moved (0 for no item).
Iid = 0;
Iquantity = 0;
Iposition = 0;

//Item and quantity arrays (ordered from left to right, bottom to top).
I[23] = 0;
Q[23] = 0;

//Add default items (ids correspond to spr_items image index+1).
I[0] = 1;
Q[0] = 0;
I[1] = 2;
Q[1] = Gcap[0];
I[2] = 3;
Q[2] = 0;
I[3] = 4;
Q[3] = Gcap[1];
I[4] = 6;
Q[4] = Gcap[3];
I[5] = 5;
Q[5] = Gcap[2];

globalvar Idoubles,Isingles,Igrenades,Iammo;
Idoubles = 2;//Number of two-handed weapons.
Isingles = 2;//Number of one-handed weapons.
Igrenades = 1;
Iammo = Idoubles+Isingles;//Number of ammo (magazines or rounds).

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control inventory
// © 2017 - Jon Harvey

//Pop up on key press.
if Kinventory{
    
    Ienable = !Ienable;
}

//Inventory item movement
if Ienable{
    
    var W,H,S;
    W = view_wport[0];
    H = view_hport[0];
    S = 64;
    
    var X,Y;
    X = floor((window_mouse_get_x()-W/2-S*3)/S);
    Y = 1-floor((window_mouse_get_y()-H/2)/S);
    
    //Select item from inventory for moving.
    if mouse_check_button_pressed(mb_left){
    
        //Select backpack
        if (X == 2) &amp;&amp; (Y == 1){
            
            Iid = Idoubles*2+Isingles+Igrenades+Iammo+Ibackpack;
            Iquantity = 0;
            
            //Empty slot.
            Ibackpack = 0;
        }
        else
        if (X&gt;=-6 &amp;&amp; X&lt;0) &amp;&amp; (Y&gt;0 &amp;&amp; Y&lt;=2+Ibackpack){
        
            //Get item details.
            Iid = I[X+Y*6];
            Iquantity = Q[X+Y*6];
            Iposition = X+Y*6;
            
            if Iid&lt;=Idoubles*2{
                
                var S = (Iid&amp;1)*2-1;
                Iquantity = Q[X+Y*6+(Iid&amp;1)];
                I[X+Y*6+S] = 0;
                Q[X+Y*6+S] = 0;
            }
            //Empty slots.
            I[X+Y*6] = 0;
            Q[X+Y*6] = 0;
        }
    }
    else
    //Release item and move it.
    if mouse_check_button_released(mb_left) &amp;&amp; Iid{
        
        var SpeedA,SpeedX,SpeedY,SpeedZ,Speed;
        SpeedA = random(10);
        SpeedX = (mouse_x-obj_player.x)/200;
        SpeedY = (mouse_y-obj_player.y)/200;
        SpeedZ = 50;
        Speed = sqrt(max(SpeedX*SpeedX+SpeedY*SpeedY,1));
        if Iid&lt;=Idoubles*2{
        
            //Move double wide item.
            var S = (Iid&amp;1)*2-1;
            if (X&gt;=-6 &amp;&amp; X&lt;0) &amp;&amp; (Y&gt;0 &amp;&amp; Y&lt;=2+Ibackpack) &amp;&amp; (X+S&gt;=-6 &amp;&amp; X+S&lt;0){
            
                var Item1,Item2;
                Item1 = I[X+Y*6+max(S,0)];Item2 = I[X+Y*6+min(S,0)];
                if (!(Item1&amp;1) || Item1&gt;Idoubles*2) &amp;&amp; (!Item2 || (Item2&amp;1) || Item2&gt;Idoubles*2){
                
                    //Check items in slot.
                    var Id1,Quantity1,Id2,Quantity2;
                    Id1 = I[X+Y*6];
                    Quantity1 = Q[X+Y*6];
                    Id2 = I[X+Y*6+S];
                    Quantity2 = Q[X+Y*6+S];
                    
                    //Move new item into new slot.
                    I[X+Y*6] = Iid;
                    Q[X+Y*6] = Iquantity*!(Iid&amp;1);
                    I[X+Y*6+S] = Iid+S;
                    Q[X+Y*6+S] = Iquantity*(Iid&amp;1);
                    
                    //Move old items to old slot (if free).
                    if !I[Iposition]{
                    
                        I[Iposition] = Id1*!(!Id2)+Id2*!Id1;
                        Q[Iposition] = Quantity1*!(!Id2)+Quantity2*!Id1;
                    }
                    if !I[Iposition+S]{
                    
                        I[Iposition+S] = Id2*!(!Id1)+Id1*!Id2;
                        Q[Iposition+S] = Quantity2*!(!Id1)+Quantity1*!Id2;
                    }
                }
                else{
                    //Add item back to old slot.
                    I[Iposition] = Iid;
                    Q[Iposition] = Iquantity*!(Iid&amp;1);
                                  
                    I[Iposition+S] = Iid+S;
                    Q[Iposition+S] = Iquantity*(Iid&amp;1);
                }
            }
            else{
                
                //Drop item.
                var Item = instance_create(obj_player.x+40*SpeedX/Speed,obj_player.y+40*SpeedY/Speed,obj_item);
                Item.Id = Iid-((Iid+1)&amp;1);
                Item.Quantity = Iquantity;
                Item.Z = 50;
                Item.SpeedA = SpeedA;
                Item.SpeedX = SpeedX;
                Item.SpeedY = SpeedY;
                Item.SpeedZ = SpeedZ;
            }
        }
        else{
            
            if Iid &gt; Idoubles*2+Isingles+Igrenades+Iammo{
                    
                    //Move backpack.    
                    if (X != 2) || (Y != 1){
                    
                        //Drop item.
                        var Item = instance_create(obj_player.x+40*SpeedX/Speed,obj_player.y+40*SpeedY/Speed,obj_item);
                        Item.Id = Iid;
                        Item.Z = 50;
                        Item.SpeedA = SpeedA;
                        Item.SpeedX = SpeedX;
                        Item.SpeedY = SpeedY;
                        Item.SpeedZ = SpeedZ;
                    }
                }
                else{
                    
                    //Move single wide item.
                    if (X&gt;=-6 &amp;&amp; X&lt;0) &amp;&amp; (Y&gt;0 &amp;&amp; Y&lt;=2+Ibackpack){
                        
                        var Item;
                        Item = I[X+Y*6];
                        if !Item || (Item&gt;Idoubles*2){
                            
                            //Check items in slot.
                            var Id,Quantity;
                            Id = I[X+Y*6];
                            Quantity = Q[X+Y*6];
                            
                            //Move new item into new slot.
                            I[X+Y*6] = Iid;
                            Q[X+Y*6] = Iquantity;
                            
                            //Move old item to old slot (if free).
                            if !I[Iposition]{
                            
                                I[Iposition] = Id;
                                Q[Iposition] = Quantity;
                            }
                        }
                        else{
                            //Add item back to old slot.
                            I[Iposition] = Iid;
                            Q[Iposition] = Iquantity;
                    }
                }
                else{
                    
                    //Drop item.
                    var Item = instance_create(obj_player.x+40*SpeedX/Speed,obj_player.y+40*SpeedY/Speed,obj_item);
                    Item.Id = Iid;
                    Item.Quantity = Iquantity;
                    Item.Z = 50;
                    Item.SpeedA = SpeedA;
                    Item.SpeedX = SpeedX;
                    Item.SpeedY = SpeedY;
                    Item.SpeedZ = SpeedZ;
                }
            }
        }
        //Finish moving
        Iid = 0;
        Iquantity = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
