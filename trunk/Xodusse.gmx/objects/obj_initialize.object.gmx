<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-32768</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the game.

/*
    © 2017 - Reece Warren
    All rights reserved.

    Game initialization event.

    obj_initialize is a persistent object that contains variables required
    for the game to run. This object is only created once through the creation code
    of rm_initialize.
*/

//DELTA TIMING:

globalvar DESIRED_FPS, DELTA, FRAME_DELTA,S90,S98;
DESIRED_FPS = 60;
DELTA = 1;
FRAME_DELTA = 1;

//SMOOTH DELTA TIMING.
S90 = power(0.90,FRAME_DELTA);
S98 = power(0.98,FRAME_DELTA);

//Seed:

//Fixed seed setting to real random - Jon
randomize();
SEED = random_get_seed();


/*
    -- Create Controller Objects:
 */

//Add key controlller - Jon
instance_create(0,0,obj_controller_keys);

//Add gun controlller - Jon
instance_create(0,0,obj_controller_guns);

//Add level controller - Reece
instance_create(0,0,obj_controller_level_selector);

//Add debug profiler - Reece
instance_create(0,0,obj_controller_debugger);

//Add console controller - Reece
instance_create(0,0,obj_controller_console);

//Add wave controller - Reece
instance_create(0,0,obj_controller_wave);

//GAME SETTINGS:
globalvar DEBUG_VISIBLE, CONSOLE_ENABLED;

CONSOLE_ENABLED = false;

DEBUG_VISIBLE = false;

//GAME MEMORY USAGE:
globalvar GM_MEMORY_USAGE_VIRTUAL, GM_MEMORY_USAGE_PHYSICAL, GM_CPU_USAGE;

GM_MEMORY_USAGE_VIRTUAL = external_define("GM_Memory_Usage_Virtual.dll", "dll_get_memory_virtual", dll_cdecl, ty_real, 0);
GM_MEMORY_USAGE_PHYSICAL = external_define("GM_Memory_Usage_Physical.dll", "dll_get_memory_physical", dll_cdecl, ty_real, 0); 

//DEFINE FONTS:
globalvar FNT_EXUDATION_LARGE, FNT_EXUDATION;

FNT_EXUDATION_LARGE = fnt_Exudation_Large;
FNT_EXUDATION = fnt_Exudation;

//DEFINE OTHER GAME VARIABLES:
globalvar PAUSED;

PAUSED = false;


//GAME CONFIGURATION:

//LOADS VARIABLES FROM CONFIG:
//DEFINES VARIABLES IF CONFIG DOESN'T EXIST OR CANNOT BE READ:

if (file_exists("Config.Xodusse")){

    // -----
    
    DISPLAY_HRESOLUTION = display_get_width();
    DISPLAY_VRESOLUTION = display_get_height();
    DISPLAY_ASPECT = DISPLAY_HRESOLUTION / DISPLAY_VRESOLUTION;
    
    //LOAD VSYNC:
    scr_cread_vsync();  
  
    //LOAD INTERPOLATION:
    scr_cread_interpolation();
    
    //LOAD FXAA:
    scr_cread_fxaa();
    
    //LOAD FULLSCREEN
    scr_cread_fullscreen();
    
    //LOAD RESOLUTION:
    scr_cread_resolution();
    
    
}



//CREATE CONFIG FILE:
else {

    //DEFINE SETTINGS:
    // -----    
    
    DISPLAY_HRESOLUTION = display_get_width();
    DISPLAY_VRESOLUTION = display_get_height();
    DISPLAY_ASPECT = DISPLAY_HRESOLUTION / DISPLAY_VRESOLUTION;
    
    //VSync - Boolean;
    SETTING_VSYNC = false;
      
    //Texture interpolation - Boolean;
    SETTING_INTERPOLATION = true;
    
    //Anti-aliasing max - Real (Can return: [0 for unsupported], [2 for 2xAA], [6 for 2xAA &amp; 4xAA], [12 for 4xAA &amp; 8xAA] and [14 for 2xAA,4xAA &amp; 8xAA]);
    SETTING_FXAA_MAX = display_aa;
    
    //Anti-aliasing current - Real;
    if (SETTING_FXAA_MAX == 14){ 
        SETTING_FXAA = 8;
    }
    else {
        SETTING_FXAA = 0;
    }
    
    //Fullscreen - Boolean;
    SETTING_FULLSCREEN = false;
    
    //Resolution current - Real (Can return: [0 for 960x540], [1 for 1280x720], [2 for 1366x768], [3 for 1600x900], [4 for 1920x1080], [5 for 2560x1440], [6 for 3840x2160], [7 for DISPLAY_HRESOLUTIONxDISPLAY_VRESOLUTION]);
    SETTING_RESOLUTION = 0;     
        
    // -----

    //WRITE SETTINGS TO CONFIG:
    
    var Config_File = file_text_open_write(working_directory + "Config.Xodusse");
    
    //Assign Settings:
    var C_Vsync = SETTING_VSYNC;
    var C_Interpolation = SETTING_INTERPOLATION;
    var C_FXAA = SETTING_FXAA;
    var C_Fullscreen = SETTING_FULLSCREEN;
    var C_Resolution = SETTING_RESOLUTION;
    
    //Write Settings:
    file_text_write_string(Config_File, "[ XODUSSE CONFIGURATION ]");
    file_text_writeln(Config_File);
    file_text_writeln(Config_File);
    
    file_text_write_string(Config_File, "VSYNC: ");
    file_text_write_real(Config_File, C_Vsync);
    file_text_writeln(Config_File);
    
    file_text_write_string(Config_File, "INTERPOLATION: ");    
    file_text_write_real(Config_File, C_Interpolation);
    file_text_writeln(Config_File);
    
    file_text_write_string(Config_File, "FXAA: ");
    file_text_write_real(Config_File, C_FXAA);
    file_text_writeln(Config_File);
    
    file_text_write_string(Config_File, "FULLSCREEN: ");
    file_text_write_real(Config_File, C_Fullscreen);
    file_text_writeln(Config_File);
    
    file_text_write_string(Config_File, "RESOLUTION: ");
    file_text_write_real(Config_File, C_Resolution);
    file_text_writeln(Config_File);
    
    
    file_text_close(Config_File);
}

 
//Reset the display:
display_reset(SETTING_FXAA, SETTING_VSYNC);
 
//Turn off texture interpolation:
texture_set_interpolation(SETTING_INTERPOLATION);

//Set fullscreen mode:
window_set_fullscreen(SETTING_FULLSCREEN);

//Set window width:
if (SETTING_RESOLUTION == 0){
    window_set_size(960,540);
}

else if (SETTING_RESOLUTION == 1){
    window_set_size(1280,720);
}

else {
    window_set_size(960,540);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delta time variables.
// © 2017 - Jon Harvey

DELTA = delta_time / 1000000;
FRAME_DELTA = DESIRED_FPS * DELTA;

S90 = power(0.90,FRAME_DELTA);
S98 = power(0.98,FRAME_DELTA);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the resolution of the window and view:
//© 2017 - Reece Warren

//Set window width:
if (SETTING_RESOLUTION == 0){
    window_set_size(960,540);
    view_wport[0] = 960;
    view_hport[0] = 540; 
}

else if (SETTING_RESOLUTION == 1){
    window_set_size(1280,720);
    view_wport[0] = 1280;
    view_hport[0] = 720;
}

else {

    ///TODO:
        //Add resolutions 2 to 7.
        //Detect the maximum resolution and determine if config value is lower:
        
    window_set_size(960,540);
    view_wport[0] = 960;
    view_hport[0] = 540; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
