<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_torso</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_game_object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add GUI and inventory object
// © 2017 - Jon Harvey

if !instance_exists(obj_controller_gui){
    
    instance_create(0,0,obj_controller_gui);
}
if !instance_exists(obj_controller_inventory){
    
    instance_create(0,0,obj_controller_inventory);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set gun variables
// © 2017 - Jon Harvey

//Number of guns.
Count = 1;
//Gun in hand (between 0 and Count).
Current = 0;
//This is the gun in second hand.
Secondary = 0;
//Inventory position of the next and last magazine.
MagazineNext = -1;
//Number of extra magazines for the current gun.
Magazines = 0;

//Gun kick animation.
Kick = 0;
//Gun swap animation.
Swap = 0;

//Gun shooting timeline.
Rate = 0;
//Gun reload timeline.
Reload = 10;

//Gun positions in inventory.
P[0] = 0;
//Guns (ids) in inventory.
G[0] = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set player variables
// © 2017 - Jon Harvey

Health = 10;

GunDirection = 90;
WalkDirection = 90;

TurnSpeed = 0;
WalkSpeedX = 0;
WalkSpeedY = 0;
WalkFrame = 0;
Radius = 16;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sort inventory for guns
// © 2017 - Jon Harvey

//This doesn't have to be calculated every step! Only when there's an inventory change.

//Variable for number of guns.
Count = 0;
//Cycle through primary inventory slots.
for(var X = 0;X&lt;6;X++){
    
    var Item,Double;
    Item = I[X];
    Double = (Item&lt;=Idoubles*2);
    //Check if item is gun (or front part of heavy gun).
    if Item&lt;=(Idoubles*2+Isingles) ^^ (Double &amp;&amp; ((Item+1)%2)){
        
        P[Count] = X+Double;            
        G[Count++] = floor(Item/2-1/2)+!Double*floor(Item/2-Idoubles);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control weapon swapping
// © 2017 - Jon Harvey

//Reduce swap animation to 0.
Swap *= S90;

if Count{
    
    if abs(Swap)&lt;0.1{
        
        var H,X,Y;
        H = view_hport[0];
        X = window_mouse_get_x();
        Y = window_mouse_get_y();
    
        Swap = mouse_wheel_down()-mouse_wheel_up();
        if Swap != 0{
            
            if point_distance(0,H,X,Y)&lt;150 &amp;&amp; I[P[Current]]&gt;Idoubles*2{
                
                Current = (Current-Swap+Count)%Count;
                Secondary = Current;
                Rate = 0;
                Reload = Greload[G[Current]]*((Q[P[Current]]&gt;0));
            }
            else{
                
                Current = (Current-Swap+Count)%Count;
                Secondary = Current;
                Rate = 0;
                Reload = Greload[G[Current]]*((Q[P[Current]]&gt;0));
            }
        }
    }
}
else{
    
    Current = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sort inventory for magazines
// © 2017 - Jon Harvey

//This doesn't have to be calculated every step! Only when there's an inventory change.

//Variables for magazine position and count.
MagazineNext = -1;
Magazines = 0;
//Cycle through all inventory slots.
for(var Y = 1+Ibackpack;Y&gt;=0;Y--)
for(var X = 0;X&lt;6;X++){
    
    var Item = I[X+Y*6];
    //Check if item is the right ammo.
    if (Item == G[Current]+Idoubles*2+Isingles+1){
        
        if Q[X+Y*6]{
            
            Magazines++;
            if (MagazineNext = -1){
                
                MagazineNext = X+Y*6;
            }
        }
    }
}

//Don't reload when empty.
if !Magazines{

    Reload = Greload[G[Current]];
}
else
if Q[P[Current]]&lt;1 &amp;&amp; Reload&gt;=Greload[G[Current]]{

    Reload = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle gun firing and reloading
// © 2017 - Jon Harvey

//Temporary speed variables for recoil.
var SpeedX,SpeedY;
SpeedX = 0;
SpeedY = 0;

//Reduce kick animation to 0.
Kick *= S90;

//Fire or swap guns when not swapping.
if !Magazines{
    
    Reload = Greload[G[Current]];
}
if Count &amp;&amp; (abs(Swap)&lt;0.1){
       
    //Add to gun timelines.
    Rate += DELTA;
    Reload += DELTA;
    
    //Fill gun when finished reloading.
    if Reload&gt;Greload[G[Current]] &amp;&amp; Q[P[Current]]&lt;1  &amp;&amp; Magazines{
    
        Q[P[Current]] = Q[MagazineNext];
        //Remove magazine
        I[MagazineNext] = 0;
        Q[MagazineNext] = 0;
    }
    else{
        
        //Shoot fully-automatic or semi-automatic with left click as long as the inventory is closed.
        if !Ienable &amp;&amp; (mouse_check_button(mb_left)*Gauto[G[Current]] || mouse_check_button_pressed(mb_left)*!Gauto[G[Current]]){
            
            //Check gun timelines.
            if (Rate&gt;1/Grate[G[Current]] &amp;&amp; Reload&gt;Greload[G[Current]] &amp;&amp; Q[P[Current]]){
                
                audio_play_sound(snd_gun,0,0);
                Rate = 0;
                
                //Shoot all bullets.
                for(var S = 0;S&lt;Gbullets[G[Current]]*max(DELTA*Grate[G[Current]],1);S++){
                    
                    var Length,Bullet,Direction;
                    Length = 16+8*S/Gbullets[G[Current]];
                    Bullet = instance_create(x+Length*dcos(GunDirection),y-Length*dsin(GunDirection),Gtype[G[Current]]);
                    Direction = GunDirection+sqr(random(1))*choose(1,-1)*Garc[G[Current]];
                    Bullet.direction = Direction;
                    Bullet.image_angle = Direction;
                }
                
                //Update or reload magazine.
                Q[P[Current]] = max(Q[P[Current]]-ceil(DELTA*Grate[G[Current]]),0);
                if (Q[P[Current]]&lt;1 &amp;&amp; Magazines){
                
                    audio_play_sound(snd_empty,0,0);
                    Q[P[Current]] = 0;
                    Reload = 0;
                }
                
                //Add gun recoil to player speed and kick.
                Kick = Grecoil[G[Current]];
                SpeedX = -Grecoil[G[Current]]*dcos(GunDirection)/FRAME_DELTA;
                SpeedY = -Grecoil[G[Current]]*dsin(GunDirection)/FRAME_DELTA;
            }
        }
        
        //Reload magazine with the reload key.
        if Kreload &amp;&amp; (Q[P[Current]]&lt;Gcap[G[Current]] &amp;&amp; Reload&gt;Greload[G[Current]] &amp;&amp; Magazines){
            
            var Last,Break;
            Last = -1;
            Break = 0;
            for(var Y = 0;Y&lt;=1+Ibackpack;Y++)
            for(var X = 5;X&gt;=0;X--){
                
                if Last&gt;=0{
                    
                    Break += (I[X+Y*6] == G[Current]+Idoubles*2+Isingles+1);
                }
                if !I[X+Y*6] &amp;&amp; !Break{
                    
                    Last = X+Y*6;
                }
            }
            if Last&gt;=0{
                
                I[Last] = 8;
                Q[Last] = Q[P[Current]];
                Q[P[Current]] = 0;
                Reload = 0;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle player movement
// © 2017 - Jon Harvey

//Set controls for movement.
var Turn,Vert,Hor;
Turn = Kturnleft-Kturnright;
Vert = Kup-Kdown;
Hor = Kleft-Kright;

//Smooth turn speed for turning motion.
TurnSpeed = TurnSpeed*S90+(1-S90)*Turn;

//Handle player turning gun and player direction.
WalkDirection += 2*TurnSpeed*FRAME_DELTA;
Turn = angle_difference(point_direction(x,y,mouse_x,mouse_y),GunDirection);
GunDirection += 0.3*Turn*FRAME_DELTA;

//Smooth walk using controls defined above.
var Speed;
Speed = max(sqrt(sqr(Hor)+sqr(Vert)),1)/Gweight[G[Current]];
SpeedX += 4*(Vert*dsin(view_angle[0])-Hor*dcos(-view_angle[0]))/Speed;
SpeedY += 4*(Vert*dcos(view_angle[0])-Hor*dsin(-view_angle[0]))/Speed;

WalkSpeedX = WalkSpeedX*S90+(1-S90)*(SpeedX*(dcos(GunDirection)*sign(SpeedX)*0.3+0.7));
WalkSpeedY = WalkSpeedY*S90-(1-S90)*(SpeedY*(dsin(GunDirection)*sign(SpeedY)*0.3+0.7));
x += FRAME_DELTA*WalkSpeedX;
y += FRAME_DELTA*WalkSpeedY;

//Update walk frame
var Speed = sqrt(sqr(WalkSpeedX)+sqr(WalkSpeedY));
WalkFrame = (WalkFrame+0.05*FRAME_DELTA*Speed)*(Speed&gt;5*DELTA);

//© 2017 - Reece Warren
//Collision code:

//Horizontal Collision:
if (WalkSpeedX != 0){
    if (!place_free(x + WalkSpeedX, y)){
    
        if (WalkSpeedX &gt; 0){
            move_contact_solid(0,WalkSpeedX);
        }
        else if (WalkSpeedX &lt; 0){
            move_contact_solid(180,-WalkSpeedX);
        }
        
        WalkSpeedX = 0;
    }
}

//Vertical Collision:
if (WalkSpeedY != 0){
    if (!place_free(x, y + WalkSpeedY)){
    
        if (WalkSpeedY &gt; 0){
            move_contact_solid(270,WalkSpeedX);
        }
        else if (WalkSpeedY &lt; 0){
            move_contact_solid(90,-WalkSpeedX);
        }
        
        WalkSpeedY = 0;
    }
}        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player sprites
// © 2017 - Jon Harvey

var Turn,Direction,Force
Turn = angle_difference(point_direction(x,y,mouse_x,mouse_y),GunDirection);
Direction = darctan2(-WalkSpeedY,WalkSpeedX);
Force = min(Kick,5);

draw_sprite_ext(spr_player_legs,WalkFrame,x,y,1,1,Direction,$FFFFFF,1);
draw_sprite_ext(spr_player_torso,Ibackpack,x-dcos(GunDirection)*Force,y+dsin(GunDirection)*Force,1,1,GunDirection,$FFFFFF,1);
draw_sprite_ext(spr_player_head,0,x-dcos(GunDirection)*Force*0.8,y+dsin(GunDirection)*Force*0.8,1,1,GunDirection+0.6*Turn,$FFFFFF,1);
//Draw left arm - Reece:
draw_sprite_ext(spr_player_arm,0,x-dcos(GunDirection)*(Force-4)-dsin(-GunDirection)*10,y+dsin(GunDirection)*(Force-4)+dcos(-GunDirection)*10,1,1,GunDirection+2*Force-4,$FFFFFF,1);
//Draw right arm - Reece:
draw_sprite_ext(spr_player_arm,0,x-dcos(GunDirection)*(Force-4)+dsin(-GunDirection)*10,y+dsin(GunDirection)*(Force-4)-dcos(-GunDirection)*10,1,-1,GunDirection-2*Force+4,$FFFFFF,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
