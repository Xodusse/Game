<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_item</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set item variables
// © 2017 - Jon Harvey

Z = 0;

SpeedA = 0;
SpeedX = 0;
SpeedY = 0;
SpeedZ = 0;

image_angle = irandom(360);

Id = Idoubles*2+Isingles+Iammo+1+irandom(1);
Quantity = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move when thrown
// © 2017 - Jon Harvey

if (Z&lt;=-SpeedZ+.001){

    //Hit ground.
    SpeedA *= .5*S90;
    SpeedX *= .5*S90;
    SpeedY *= .5*S90;
    SpeedZ *= -.5*S90;
}
else{
    
    //Fall to ground.
    SpeedZ += -653*DELTA;
}

//Update visuals.
image_angle += SpeedA*FRAME_DELTA;
image_xscale = 1+.001*Z;
image_yscale = 1+.001*Z;
depth = -Z;

//Control movement.
x += SpeedX*FRAME_DELTA;
y += SpeedY*FRAME_DELTA;
Z = max(Z+SpeedZ*FRAME_DELTA,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Give item to player
// © 2017 - Jon Harvey

if (Z==0){
    
    //Add backpack.
    if Id&gt;Idoubles*2+Isingles+Iammo{
                
        if !Ibackpack
        {
            Ibackpack = Id-(Idoubles*2+Isingles+Iammo);
            instance_destroy();
        }
    }
    else{
    
        var Given = 0;
        for(var Y = 1+Ibackpack;Y&gt;=0;Y--)
        for(var X = 0;X&lt;6;X++){
            
        if Given break;
        //Check if item slot is free.
        if (I[X+Y*6] == 0){
            
            if (Id&lt;=Idoubles*2)
            {
                if  (X&lt;4) &amp;&amp; (I[X+1+Y*6] == 0)
                {
                    Given = 1;
                    //Add magazine and ammo (double slot).
                    I[X+Y*6] = Id;
                    I[X+1+Y*6] = Id+1;
                    Q[X+Y*6] = 0;
                    Q[X+1+Y*6] = Quantity;
                    
                    Message = "Picked up "+Gname[floor(Id/2)];
                    MessageFade = 1;
                    instance_destroy();
                }
            }
            else{
                    
                    //Add magazine and ammo (single slot).
                    Given = 1;
                    I[X+Y*6] = Id;
                    Q[X+Y*6] = Quantity;
                    
                    if Id&gt;Idoubles*2+Isingles{
                    
                        Message = "+"+string(Quantity)+" ammo";
                    }
                    else{
                    
                        Message = "Picked up "+Gname[Id-Idoubles-1];
                    }
                    MessageFade = 1;
                    instance_destroy();
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw item
// © 2017 - Jon Harvey

if Id&lt;=Idoubles*2{

    draw_sprite_ext(spr_items,Id-1,x-image_xscale*16*dcos(image_angle),y+image_xscale*16*dsin(image_angle),image_xscale/2,image_yscale/2,image_angle,-1,1);
    draw_sprite_ext(spr_items,Id,x+image_xscale*16*dcos(image_angle),y-image_xscale*16*dsin(image_angle),image_xscale/2,image_yscale/2,image_angle,-1,1);
}
else{

    draw_sprite_ext(spr_items,Id-1,x,y,image_xscale/2,image_yscale/2,image_angle,-1,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
